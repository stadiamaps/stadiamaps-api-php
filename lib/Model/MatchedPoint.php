<?php
/**
 * MatchedPoint
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stadia Maps Geospatial APIs
 *
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 7.0.0
 * Contact: support@stadiamaps.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MatchedPoint Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MatchedPoint implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'matchedPoint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lat' => 'float',
        'lon' => 'float',
        'type' => 'string',
        'edge_index' => 'int',
        'begin_route_discontinuity' => 'bool',
        'end_route_discontinuity' => 'bool',
        'distance_along_edge' => 'float',
        'distance_from_trace_point' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lat' => 'double',
        'lon' => 'double',
        'type' => null,
        'edge_index' => null,
        'begin_route_discontinuity' => null,
        'end_route_discontinuity' => null,
        'distance_along_edge' => 'double',
        'distance_from_trace_point' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lat' => false,
        'lon' => false,
        'type' => false,
        'edge_index' => false,
        'begin_route_discontinuity' => false,
        'end_route_discontinuity' => false,
        'distance_along_edge' => false,
        'distance_from_trace_point' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lat' => 'lat',
        'lon' => 'lon',
        'type' => 'type',
        'edge_index' => 'edge_index',
        'begin_route_discontinuity' => 'begin_route_discontinuity',
        'end_route_discontinuity' => 'end_route_discontinuity',
        'distance_along_edge' => 'distance_along_edge',
        'distance_from_trace_point' => 'distance_from_trace_point'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lat' => 'setLat',
        'lon' => 'setLon',
        'type' => 'setType',
        'edge_index' => 'setEdgeIndex',
        'begin_route_discontinuity' => 'setBeginRouteDiscontinuity',
        'end_route_discontinuity' => 'setEndRouteDiscontinuity',
        'distance_along_edge' => 'setDistanceAlongEdge',
        'distance_from_trace_point' => 'setDistanceFromTracePoint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lat' => 'getLat',
        'lon' => 'getLon',
        'type' => 'getType',
        'edge_index' => 'getEdgeIndex',
        'begin_route_discontinuity' => 'getBeginRouteDiscontinuity',
        'end_route_discontinuity' => 'getEndRouteDiscontinuity',
        'distance_along_edge' => 'getDistanceAlongEdge',
        'distance_from_trace_point' => 'getDistanceFromTracePoint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_UNMATCHED = 'unmatched';
    public const TYPE_INTERPOLATED = 'interpolated';
    public const TYPE_MATCHED = 'matched';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNMATCHED,
            self::TYPE_INTERPOLATED,
            self::TYPE_MATCHED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('lat', $data ?? [], null);
        $this->setIfExists('lon', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('edge_index', $data ?? [], null);
        $this->setIfExists('begin_route_discontinuity', $data ?? [], false);
        $this->setIfExists('end_route_discontinuity', $data ?? [], false);
        $this->setIfExists('distance_along_edge', $data ?? [], null);
        $this->setIfExists('distance_from_trace_point', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lat'] === null) {
            $invalidProperties[] = "'lat' can't be null";
        }
        if ($this->container['lon'] === null) {
            $invalidProperties[] = "'lon' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lat
     *
     * @return float
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param float $lat The latitude of the matched point.
     *
     * @return self
     */
    public function setLat($lat)
    {
        if (is_null($lat)) {
            throw new \InvalidArgumentException('non-nullable lat cannot be null');
        }
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return float
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param float $lon The longitude of the matched point.
     *
     * @return self
     */
    public function setLon($lon)
    {
        if (is_null($lon)) {
            throw new \InvalidArgumentException('non-nullable lon cannot be null');
        }
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets edge_index
     *
     * @return int|null
     */
    public function getEdgeIndex()
    {
        return $this->container['edge_index'];
    }

    /**
     * Sets edge_index
     *
     * @param int|null $edge_index The index of the edge in the list of `edges`. This key will be missing if the point is unmatched.
     *
     * @return self
     */
    public function setEdgeIndex($edge_index)
    {
        if (is_null($edge_index)) {
            throw new \InvalidArgumentException('non-nullable edge_index cannot be null');
        }
        $this->container['edge_index'] = $edge_index;

        return $this;
    }

    /**
     * Gets begin_route_discontinuity
     *
     * @return bool|null
     */
    public function getBeginRouteDiscontinuity()
    {
        return $this->container['begin_route_discontinuity'];
    }

    /**
     * Sets begin_route_discontinuity
     *
     * @param bool|null $begin_route_discontinuity If true, this match result is the begin location of a route discontinuity.
     *
     * @return self
     */
    public function setBeginRouteDiscontinuity($begin_route_discontinuity)
    {
        if (is_null($begin_route_discontinuity)) {
            throw new \InvalidArgumentException('non-nullable begin_route_discontinuity cannot be null');
        }
        $this->container['begin_route_discontinuity'] = $begin_route_discontinuity;

        return $this;
    }

    /**
     * Gets end_route_discontinuity
     *
     * @return bool|null
     */
    public function getEndRouteDiscontinuity()
    {
        return $this->container['end_route_discontinuity'];
    }

    /**
     * Sets end_route_discontinuity
     *
     * @param bool|null $end_route_discontinuity If true, this match result is the end location of a route discontinuity.
     *
     * @return self
     */
    public function setEndRouteDiscontinuity($end_route_discontinuity)
    {
        if (is_null($end_route_discontinuity)) {
            throw new \InvalidArgumentException('non-nullable end_route_discontinuity cannot be null');
        }
        $this->container['end_route_discontinuity'] = $end_route_discontinuity;

        return $this;
    }

    /**
     * Gets distance_along_edge
     *
     * @return float|null
     */
    public function getDistanceAlongEdge()
    {
        return $this->container['distance_along_edge'];
    }

    /**
     * Sets distance_along_edge
     *
     * @param float|null $distance_along_edge The distance along the associated edge for this matched point, expressed as a value between 0 and 1. For example, if the matched point is halfway along the edge, then the value will be 0.5. This key will be absent if the point is unmatched.
     *
     * @return self
     */
    public function setDistanceAlongEdge($distance_along_edge)
    {
        if (is_null($distance_along_edge)) {
            throw new \InvalidArgumentException('non-nullable distance_along_edge cannot be null');
        }
        $this->container['distance_along_edge'] = $distance_along_edge;

        return $this;
    }

    /**
     * Gets distance_from_trace_point
     *
     * @return float|null
     */
    public function getDistanceFromTracePoint()
    {
        return $this->container['distance_from_trace_point'];
    }

    /**
     * Sets distance_from_trace_point
     *
     * @param float|null $distance_from_trace_point The distance in meters from the trace point to the matched point. This key will be absent if the point is unmatched.
     *
     * @return self
     */
    public function setDistanceFromTracePoint($distance_from_trace_point)
    {
        if (is_null($distance_from_trace_point)) {
            throw new \InvalidArgumentException('non-nullable distance_from_trace_point cannot be null');
        }
        $this->container['distance_from_trace_point'] = $distance_from_trace_point;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


