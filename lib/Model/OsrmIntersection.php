<?php
/**
 * OsrmIntersection
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stadia Maps Geospatial APIs
 *
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 7.0.0
 * Contact: support@stadiamaps.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OsrmIntersection Class Doc Comment
 *
 * @category Class
 * @description Detailed information about intersections that the route traverses. For every step, the first intersection is at the location of the maneuver. Additional intersections will be provided for every road or path traversed until the next step.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OsrmIntersection implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'osrmIntersection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'location' => 'float[]',
        'bearings' => 'int[]',
        'classes' => 'string[]',
        'entry' => 'bool[]',
        'in' => 'int',
        'out' => 'int',
        'lanes' => '\OpenAPI\Client\Model\OsrmLane[]',
        'admin_index' => 'int',
        'duration' => 'float',
        'turn_duration' => 'float',
        'turn_weight' => 'float',
        'geometry_index' => 'int',
        'weight' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'location' => 'double',
        'bearings' => null,
        'classes' => null,
        'entry' => null,
        'in' => null,
        'out' => null,
        'lanes' => null,
        'admin_index' => null,
        'duration' => 'double',
        'turn_duration' => 'double',
        'turn_weight' => 'double',
        'geometry_index' => null,
        'weight' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'location' => false,
        'bearings' => false,
        'classes' => false,
        'entry' => false,
        'in' => false,
        'out' => false,
        'lanes' => false,
        'admin_index' => false,
        'duration' => false,
        'turn_duration' => false,
        'turn_weight' => false,
        'geometry_index' => false,
        'weight' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'location' => 'location',
        'bearings' => 'bearings',
        'classes' => 'classes',
        'entry' => 'entry',
        'in' => 'in',
        'out' => 'out',
        'lanes' => 'lanes',
        'admin_index' => 'admin_index',
        'duration' => 'duration',
        'turn_duration' => 'turn_duration',
        'turn_weight' => 'turn_weight',
        'geometry_index' => 'geometry_index',
        'weight' => 'weight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'location' => 'setLocation',
        'bearings' => 'setBearings',
        'classes' => 'setClasses',
        'entry' => 'setEntry',
        'in' => 'setIn',
        'out' => 'setOut',
        'lanes' => 'setLanes',
        'admin_index' => 'setAdminIndex',
        'duration' => 'setDuration',
        'turn_duration' => 'setTurnDuration',
        'turn_weight' => 'setTurnWeight',
        'geometry_index' => 'setGeometryIndex',
        'weight' => 'setWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'location' => 'getLocation',
        'bearings' => 'getBearings',
        'classes' => 'getClasses',
        'entry' => 'getEntry',
        'in' => 'getIn',
        'out' => 'getOut',
        'lanes' => 'getLanes',
        'admin_index' => 'getAdminIndex',
        'duration' => 'getDuration',
        'turn_duration' => 'getTurnDuration',
        'turn_weight' => 'getTurnWeight',
        'geometry_index' => 'getGeometryIndex',
        'weight' => 'getWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CLASSES_TOLL = 'toll';
    public const CLASSES_FERRY = 'ferry';
    public const CLASSES_RESTRICTED = 'restricted';
    public const CLASSES_MOTORWAY = 'motorway';
    public const CLASSES_TUNNEL = 'tunnel';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClassesAllowableValues()
    {
        return [
            self::CLASSES_TOLL,
            self::CLASSES_FERRY,
            self::CLASSES_RESTRICTED,
            self::CLASSES_MOTORWAY,
            self::CLASSES_TUNNEL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('bearings', $data ?? [], null);
        $this->setIfExists('classes', $data ?? [], null);
        $this->setIfExists('entry', $data ?? [], null);
        $this->setIfExists('in', $data ?? [], null);
        $this->setIfExists('out', $data ?? [], null);
        $this->setIfExists('lanes', $data ?? [], null);
        $this->setIfExists('admin_index', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('turn_duration', $data ?? [], null);
        $this->setIfExists('turn_weight', $data ?? [], null);
        $this->setIfExists('geometry_index', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ((count($this->container['location']) > 2)) {
            $invalidProperties[] = "invalid value for 'location', number of items must be less than or equal to 2.";
        }

        if ((count($this->container['location']) < 2)) {
            $invalidProperties[] = "invalid value for 'location', number of items must be greater than or equal to 2.";
        }

        if ($this->container['bearings'] === null) {
            $invalidProperties[] = "'bearings' can't be null";
        }
        if ($this->container['entry'] === null) {
            $invalidProperties[] = "'entry' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets location
     *
     * @return float[]
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param float[] $location A (longitude, latitude) coordinate pair.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }

        if ((count($location) > 2)) {
            throw new \InvalidArgumentException('invalid value for $location when calling OsrmIntersection., number of items must be less than or equal to 2.');
        }
        if ((count($location) < 2)) {
            throw new \InvalidArgumentException('invalid length for $location when calling OsrmIntersection., number of items must be greater than or equal to 2.');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets bearings
     *
     * @return int[]
     */
    public function getBearings()
    {
        return $this->container['bearings'];
    }

    /**
     * Sets bearings
     *
     * @param int[] $bearings A list of bearing values that are available for travel through the intersection.
     *
     * @return self
     */
    public function setBearings($bearings)
    {
        if (is_null($bearings)) {
            throw new \InvalidArgumentException('non-nullable bearings cannot be null');
        }
        $this->container['bearings'] = $bearings;

        return $this;
    }

    /**
     * Gets classes
     *
     * @return string[]|null
     */
    public function getClasses()
    {
        return $this->container['classes'];
    }

    /**
     * Sets classes
     *
     * @param string[]|null $classes classes
     *
     * @return self
     */
    public function setClasses($classes)
    {
        if (is_null($classes)) {
            throw new \InvalidArgumentException('non-nullable classes cannot be null');
        }
        $allowedValues = $this->getClassesAllowableValues();
        if (array_diff($classes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'classes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['classes'] = $classes;

        return $this;
    }

    /**
     * Gets entry
     *
     * @return bool[]
     */
    public function getEntry()
    {
        return $this->container['entry'];
    }

    /**
     * Sets entry
     *
     * @param bool[] $entry A list of entry flags, which map 1:1 to the bearings. A value of true indicates that the respective road could be entered on a valid route. False indicates that the turn onto the respective road would violate a restriction.
     *
     * @return self
     */
    public function setEntry($entry)
    {
        if (is_null($entry)) {
            throw new \InvalidArgumentException('non-nullable entry cannot be null');
        }
        $this->container['entry'] = $entry;

        return $this;
    }

    /**
     * Gets in
     *
     * @return int|null
     */
    public function getIn()
    {
        return $this->container['in'];
    }

    /**
     * Sets in
     *
     * @param int|null $in An index into bearings/entry array. Used to calculate the bearing just before the turn. Namely, the clockwise angle from true north to the direction of travel immediately before the maneuver/passing the intersection. Bearings are given relative to the intersection. To get the bearing in the direction of driving, the bearing has to be rotated by a value of 180. The value is not supplied for depart maneuvers.
     *
     * @return self
     */
    public function setIn($in)
    {
        if (is_null($in)) {
            throw new \InvalidArgumentException('non-nullable in cannot be null');
        }
        $this->container['in'] = $in;

        return $this;
    }

    /**
     * Gets out
     *
     * @return int|null
     */
    public function getOut()
    {
        return $this->container['out'];
    }

    /**
     * Sets out
     *
     * @param int|null $out An index into bearings/entry array. Used to calculate the bearing just after the turn. Namely, the clockwise angle from true north to the direction of travel immediately after the maneuver/passing the intersection. This is not supplied for arrive maneuvers.
     *
     * @return self
     */
    public function setOut($out)
    {
        if (is_null($out)) {
            throw new \InvalidArgumentException('non-nullable out cannot be null');
        }
        $this->container['out'] = $out;

        return $this;
    }

    /**
     * Gets lanes
     *
     * @return \OpenAPI\Client\Model\OsrmLane[]|null
     */
    public function getLanes()
    {
        return $this->container['lanes'];
    }

    /**
     * Sets lanes
     *
     * @param \OpenAPI\Client\Model\OsrmLane[]|null $lanes Available turn lanes at the intersection. May be omitted if no lane information is available for the intersection.
     *
     * @return self
     */
    public function setLanes($lanes)
    {
        if (is_null($lanes)) {
            throw new \InvalidArgumentException('non-nullable lanes cannot be null');
        }
        $this->container['lanes'] = $lanes;

        return $this;
    }

    /**
     * Gets admin_index
     *
     * @return int|null
     */
    public function getAdminIndex()
    {
        return $this->container['admin_index'];
    }

    /**
     * Sets admin_index
     *
     * @param int|null $admin_index The index into the admin boundaries list on the route leg.
     *
     * @return self
     */
    public function setAdminIndex($admin_index)
    {
        if (is_null($admin_index)) {
            throw new \InvalidArgumentException('non-nullable admin_index cannot be null');
        }
        $this->container['admin_index'] = $admin_index;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float|null $duration The estimated duration, in seconds, to traverse the intersection.
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets turn_duration
     *
     * @return float|null
     */
    public function getTurnDuration()
    {
        return $this->container['turn_duration'];
    }

    /**
     * Sets turn_duration
     *
     * @param float|null $turn_duration The estimated duration, in seconds, to complete the turn.
     *
     * @return self
     */
    public function setTurnDuration($turn_duration)
    {
        if (is_null($turn_duration)) {
            throw new \InvalidArgumentException('non-nullable turn_duration cannot be null');
        }
        $this->container['turn_duration'] = $turn_duration;

        return $this;
    }

    /**
     * Gets turn_weight
     *
     * @return float|null
     */
    public function getTurnWeight()
    {
        return $this->container['turn_weight'];
    }

    /**
     * Sets turn_weight
     *
     * @param float|null $turn_weight turn_weight
     *
     * @return self
     */
    public function setTurnWeight($turn_weight)
    {
        if (is_null($turn_weight)) {
            throw new \InvalidArgumentException('non-nullable turn_weight cannot be null');
        }
        $this->container['turn_weight'] = $turn_weight;

        return $this;
    }

    /**
     * Gets geometry_index
     *
     * @return int|null
     */
    public function getGeometryIndex()
    {
        return $this->container['geometry_index'];
    }

    /**
     * Sets geometry_index
     *
     * @param int|null $geometry_index The index of the intersection in the leg geometry.
     *
     * @return self
     */
    public function setGeometryIndex($geometry_index)
    {
        if (is_null($geometry_index)) {
            throw new \InvalidArgumentException('non-nullable geometry_index cannot be null');
        }
        $this->container['geometry_index'] = $geometry_index;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


