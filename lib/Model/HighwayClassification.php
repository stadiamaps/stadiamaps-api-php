<?php
/**
 * HighwayClassification
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stadia Maps Geospatial APIs
 *
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 6.6.3
 * Contact: support@stadiamaps.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HighwayClassification Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HighwayClassification implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'highwayClassification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'internal' => 'bool',
        'link' => 'bool',
        'surface' => 'string',
        'use' => 'string',
        'classification' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'internal' => null,
        'link' => null,
        'surface' => null,
        'use' => null,
        'classification' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'internal' => false,
        'link' => false,
        'surface' => false,
        'use' => false,
        'classification' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'internal' => 'internal',
        'link' => 'link',
        'surface' => 'surface',
        'use' => 'use',
        'classification' => 'classification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'internal' => 'setInternal',
        'link' => 'setLink',
        'surface' => 'setSurface',
        'use' => 'setUse',
        'classification' => 'setClassification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'internal' => 'getInternal',
        'link' => 'getLink',
        'surface' => 'getSurface',
        'use' => 'getUse',
        'classification' => 'getClassification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SURFACE_PAVED_SMOOTH = 'paved_smooth';
    public const SURFACE_PAVED = 'paved';
    public const SURFACE_PAVED_ROUGH = 'paved_rough';
    public const SURFACE_COMPACTED = 'compacted';
    public const SURFACE_DIRT = 'dirt';
    public const SURFACE_GRAVEL = 'gravel';
    public const SURFACE_PATH = 'path';
    public const SURFACE_IMPASSABLE = 'impassable';
    public const MODEL_USE_ROAD = 'road';
    public const MODEL_USE_RAMP = 'ramp';
    public const MODEL_USE_TURN_CHANNEL = 'turn_channel';
    public const MODEL_USE_TRACK = 'track';
    public const MODEL_USE_DRIVEWAY = 'driveway';
    public const MODEL_USE_ALLEY = 'alley';
    public const MODEL_USE_PARKING_AISLE = 'parking_aisle';
    public const MODEL_USE_EMERGENCY_ACCESS = 'emergency_access';
    public const MODEL_USE_DRIVE_THROUGH = 'drive_through';
    public const MODEL_USE_CULDESAC = 'culdesac';
    public const MODEL_USE_LIVING_STREET = 'living_street';
    public const MODEL_USE_SERVICE_ROAD = 'service_road';
    public const MODEL_USE_CYCLEWAY = 'cycleway';
    public const MODEL_USE_MOUNTAIN_BIKE = 'mountain_bike';
    public const MODEL_USE_SIDEWALK = 'sidewalk';
    public const MODEL_USE_FOOTWAY = 'footway';
    public const MODEL_USE_ELEVATOR = 'elevator';
    public const MODEL_USE_STEPS = 'steps';
    public const MODEL_USE_ESCALATOR = 'escalator';
    public const MODEL_USE_PATH = 'path';
    public const MODEL_USE_PEDESTRIAN = 'pedestrian';
    public const MODEL_USE_BRIDLEWAY = 'bridleway';
    public const MODEL_USE_PEDESTRIAN_CROSSING = 'pedestrian_crossing';
    public const MODEL_USE_REST_AREA = 'rest_area';
    public const MODEL_USE_SERVICE_AREA = 'service_area';
    public const MODEL_USE_OTHER = 'other';
    public const MODEL_USE_RAIL = 'rail';
    public const MODEL_USE_FERRY = 'ferry';
    public const MODEL_USE_RAIL_FERRY = 'rail-ferry';
    public const MODEL_USE_BUS = 'bus';
    public const MODEL_USE_EGRESS_CONNECTION = 'egress_connection';
    public const MODEL_USE_PLATFORM_CONNNECTION = 'platform_connnection';
    public const MODEL_USE_TRANSIT_CONNECTION = 'transit_connection';
    public const MODEL_USE_CONSTRUCTION = 'construction';
    public const CLASSIFICATION_MOTORWAY = 'motorway';
    public const CLASSIFICATION_TRUNK = 'trunk';
    public const CLASSIFICATION_PRIMARY = 'primary';
    public const CLASSIFICATION_SECONDARY = 'secondary';
    public const CLASSIFICATION_TERTIARY = 'tertiary';
    public const CLASSIFICATION_UNCLASSIFIED = 'unclassified';
    public const CLASSIFICATION_RESIDENTIAL = 'residential';
    public const CLASSIFICATION_SERVICE_OTHER = 'service_other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSurfaceAllowableValues()
    {
        return [
            self::SURFACE_PAVED_SMOOTH,
            self::SURFACE_PAVED,
            self::SURFACE_PAVED_ROUGH,
            self::SURFACE_COMPACTED,
            self::SURFACE_DIRT,
            self::SURFACE_GRAVEL,
            self::SURFACE_PATH,
            self::SURFACE_IMPASSABLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseAllowableValues()
    {
        return [
            self::MODEL_USE_ROAD,
            self::MODEL_USE_RAMP,
            self::MODEL_USE_TURN_CHANNEL,
            self::MODEL_USE_TRACK,
            self::MODEL_USE_DRIVEWAY,
            self::MODEL_USE_ALLEY,
            self::MODEL_USE_PARKING_AISLE,
            self::MODEL_USE_EMERGENCY_ACCESS,
            self::MODEL_USE_DRIVE_THROUGH,
            self::MODEL_USE_CULDESAC,
            self::MODEL_USE_LIVING_STREET,
            self::MODEL_USE_SERVICE_ROAD,
            self::MODEL_USE_CYCLEWAY,
            self::MODEL_USE_MOUNTAIN_BIKE,
            self::MODEL_USE_SIDEWALK,
            self::MODEL_USE_FOOTWAY,
            self::MODEL_USE_ELEVATOR,
            self::MODEL_USE_STEPS,
            self::MODEL_USE_ESCALATOR,
            self::MODEL_USE_PATH,
            self::MODEL_USE_PEDESTRIAN,
            self::MODEL_USE_BRIDLEWAY,
            self::MODEL_USE_PEDESTRIAN_CROSSING,
            self::MODEL_USE_REST_AREA,
            self::MODEL_USE_SERVICE_AREA,
            self::MODEL_USE_OTHER,
            self::MODEL_USE_RAIL,
            self::MODEL_USE_FERRY,
            self::MODEL_USE_RAIL_FERRY,
            self::MODEL_USE_BUS,
            self::MODEL_USE_EGRESS_CONNECTION,
            self::MODEL_USE_PLATFORM_CONNNECTION,
            self::MODEL_USE_TRANSIT_CONNECTION,
            self::MODEL_USE_CONSTRUCTION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClassificationAllowableValues()
    {
        return [
            self::CLASSIFICATION_MOTORWAY,
            self::CLASSIFICATION_TRUNK,
            self::CLASSIFICATION_PRIMARY,
            self::CLASSIFICATION_SECONDARY,
            self::CLASSIFICATION_TERTIARY,
            self::CLASSIFICATION_UNCLASSIFIED,
            self::CLASSIFICATION_RESIDENTIAL,
            self::CLASSIFICATION_SERVICE_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('internal', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('surface', $data ?? [], null);
        $this->setIfExists('use', $data ?? [], null);
        $this->setIfExists('classification', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSurfaceAllowableValues();
        if (!is_null($this->container['surface']) && !in_array($this->container['surface'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'surface', must be one of '%s'",
                $this->container['surface'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUseAllowableValues();
        if (!is_null($this->container['use']) && !in_array($this->container['use'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'use', must be one of '%s'",
                $this->container['use'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClassificationAllowableValues();
        if (!is_null($this->container['classification']) && !in_array($this->container['classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'classification', must be one of '%s'",
                $this->container['classification'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets internal
     *
     * @return bool|null
     */
    public function getInternal()
    {
        return $this->container['internal'];
    }

    /**
     * Sets internal
     *
     * @param bool|null $internal Is the edge internal to an intersection?
     *
     * @return self
     */
    public function setInternal($internal)
    {
        if (is_null($internal)) {
            throw new \InvalidArgumentException('non-nullable internal cannot be null');
        }
        $this->container['internal'] = $internal;

        return $this;
    }

    /**
     * Gets link
     *
     * @return bool|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param bool|null $link Is the edge a ramp or turn channel?
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            throw new \InvalidArgumentException('non-nullable link cannot be null');
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets surface
     *
     * @return string|null
     */
    public function getSurface()
    {
        return $this->container['surface'];
    }

    /**
     * Sets surface
     *
     * @param string|null $surface A representation of the smoothness of the highway. This is used for costing and access checks based on the vehicle type.
     *
     * @return self
     */
    public function setSurface($surface)
    {
        if (is_null($surface)) {
            throw new \InvalidArgumentException('non-nullable surface cannot be null');
        }
        $allowedValues = $this->getSurfaceAllowableValues();
        if (!in_array($surface, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'surface', must be one of '%s'",
                    $surface,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['surface'] = $surface;

        return $this;
    }

    /**
     * Gets use
     *
     * @return string|null
     */
    public function getUse()
    {
        return $this->container['use'];
    }

    /**
     * Sets use
     *
     * @param string|null $use use
     *
     * @return self
     */
    public function setUse($use)
    {
        if (is_null($use)) {
            throw new \InvalidArgumentException('non-nullable use cannot be null');
        }
        $allowedValues = $this->getUseAllowableValues();
        if (!in_array($use, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'use', must be one of '%s'",
                    $use,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['use'] = $use;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return string|null
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param string|null $classification The classification/importance of the road/path. Used for a variety of purposes including fallback speed estimation and access for certain vehicle types.
     *
     * @return self
     */
    public function setClassification($classification)
    {
        if (is_null($classification)) {
            throw new \InvalidArgumentException('non-nullable classification cannot be null');
        }
        $allowedValues = $this->getClassificationAllowableValues();
        if (!in_array($classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'classification', must be one of '%s'",
                    $classification,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['classification'] = $classification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


