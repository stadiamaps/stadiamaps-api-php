<?php
/**
 * LocateNode
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stadia Maps Geospatial APIs
 *
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 6.5.0
 * Contact: support@stadiamaps.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LocateNode Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LocateNode implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'locateNode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lat' => 'float',
        'lon' => 'float',
        'traffic_signal' => 'bool',
        'type' => '\OpenAPI\Client\Model\NodeType',
        'node_id' => '\OpenAPI\Client\Model\NodeId',
        'access' => '\OpenAPI\Client\Model\Access',
        'edge_count' => 'int',
        'administrative' => '\OpenAPI\Client\Model\Administrative',
        'intersection_type' => 'string',
        'density' => 'int',
        'local_edge_count' => 'int',
        'mode_change' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lat' => 'double',
        'lon' => 'double',
        'traffic_signal' => null,
        'type' => null,
        'node_id' => null,
        'access' => null,
        'edge_count' => null,
        'administrative' => null,
        'intersection_type' => null,
        'density' => null,
        'local_edge_count' => null,
        'mode_change' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lat' => false,
        'lon' => false,
        'traffic_signal' => false,
        'type' => false,
        'node_id' => false,
        'access' => false,
        'edge_count' => false,
        'administrative' => false,
        'intersection_type' => false,
        'density' => false,
        'local_edge_count' => false,
        'mode_change' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lat' => 'lat',
        'lon' => 'lon',
        'traffic_signal' => 'traffic_signal',
        'type' => 'type',
        'node_id' => 'node_id',
        'access' => 'access',
        'edge_count' => 'edge_count',
        'administrative' => 'administrative',
        'intersection_type' => 'intersection_type',
        'density' => 'density',
        'local_edge_count' => 'local_edge_count',
        'mode_change' => 'mode_change'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lat' => 'setLat',
        'lon' => 'setLon',
        'traffic_signal' => 'setTrafficSignal',
        'type' => 'setType',
        'node_id' => 'setNodeId',
        'access' => 'setAccess',
        'edge_count' => 'setEdgeCount',
        'administrative' => 'setAdministrative',
        'intersection_type' => 'setIntersectionType',
        'density' => 'setDensity',
        'local_edge_count' => 'setLocalEdgeCount',
        'mode_change' => 'setModeChange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lat' => 'getLat',
        'lon' => 'getLon',
        'traffic_signal' => 'getTrafficSignal',
        'type' => 'getType',
        'node_id' => 'getNodeId',
        'access' => 'getAccess',
        'edge_count' => 'getEdgeCount',
        'administrative' => 'getAdministrative',
        'intersection_type' => 'getIntersectionType',
        'density' => 'getDensity',
        'local_edge_count' => 'getLocalEdgeCount',
        'mode_change' => 'getModeChange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INTERSECTION_TYPE_REGULAR = 'regular';
    public const INTERSECTION_TYPE_FALSE = 'false';
    public const INTERSECTION_TYPE_DEAD_END = 'dead-end';
    public const INTERSECTION_TYPE_FORK = 'fork';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntersectionTypeAllowableValues()
    {
        return [
            self::INTERSECTION_TYPE_REGULAR,
            self::INTERSECTION_TYPE_FALSE,
            self::INTERSECTION_TYPE_DEAD_END,
            self::INTERSECTION_TYPE_FORK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('lat', $data ?? [], null);
        $this->setIfExists('lon', $data ?? [], null);
        $this->setIfExists('traffic_signal', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
        $this->setIfExists('edge_count', $data ?? [], null);
        $this->setIfExists('administrative', $data ?? [], null);
        $this->setIfExists('intersection_type', $data ?? [], null);
        $this->setIfExists('density', $data ?? [], null);
        $this->setIfExists('local_edge_count', $data ?? [], null);
        $this->setIfExists('mode_change', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lat'] === null) {
            $invalidProperties[] = "'lat' can't be null";
        }
        if (($this->container['lat'] > 90)) {
            $invalidProperties[] = "invalid value for 'lat', must be smaller than or equal to 90.";
        }

        if (($this->container['lat'] < -90)) {
            $invalidProperties[] = "invalid value for 'lat', must be bigger than or equal to -90.";
        }

        if ($this->container['lon'] === null) {
            $invalidProperties[] = "'lon' can't be null";
        }
        if (($this->container['lon'] > 180)) {
            $invalidProperties[] = "invalid value for 'lon', must be smaller than or equal to 180.";
        }

        if (($this->container['lon'] < -180)) {
            $invalidProperties[] = "invalid value for 'lon', must be bigger than or equal to -180.";
        }

        $allowedValues = $this->getIntersectionTypeAllowableValues();
        if (!is_null($this->container['intersection_type']) && !in_array($this->container['intersection_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'intersection_type', must be one of '%s'",
                $this->container['intersection_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lat
     *
     * @return float
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param float $lat The latitude of a point in the shape.
     *
     * @return self
     */
    public function setLat($lat)
    {
        if (is_null($lat)) {
            throw new \InvalidArgumentException('non-nullable lat cannot be null');
        }

        if (($lat > 90)) {
            throw new \InvalidArgumentException('invalid value for $lat when calling LocateNode., must be smaller than or equal to 90.');
        }
        if (($lat < -90)) {
            throw new \InvalidArgumentException('invalid value for $lat when calling LocateNode., must be bigger than or equal to -90.');
        }

        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return float
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param float $lon The longitude of a point in the shape.
     *
     * @return self
     */
    public function setLon($lon)
    {
        if (is_null($lon)) {
            throw new \InvalidArgumentException('non-nullable lon cannot be null');
        }

        if (($lon > 180)) {
            throw new \InvalidArgumentException('invalid value for $lon when calling LocateNode., must be smaller than or equal to 180.');
        }
        if (($lon < -180)) {
            throw new \InvalidArgumentException('invalid value for $lon when calling LocateNode., must be bigger than or equal to -180.');
        }

        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets traffic_signal
     *
     * @return bool|null
     */
    public function getTrafficSignal()
    {
        return $this->container['traffic_signal'];
    }

    /**
     * Sets traffic_signal
     *
     * @param bool|null $traffic_signal traffic_signal
     *
     * @return self
     */
    public function setTrafficSignal($traffic_signal)
    {
        if (is_null($traffic_signal)) {
            throw new \InvalidArgumentException('non-nullable traffic_signal cannot be null');
        }
        $this->container['traffic_signal'] = $traffic_signal;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\NodeType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\NodeType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets node_id
     *
     * @return \OpenAPI\Client\Model\NodeId|null
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param \OpenAPI\Client\Model\NodeId|null $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets access
     *
     * @return \OpenAPI\Client\Model\Access|null
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param \OpenAPI\Client\Model\Access|null $access access
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets edge_count
     *
     * @return int|null
     */
    public function getEdgeCount()
    {
        return $this->container['edge_count'];
    }

    /**
     * Sets edge_count
     *
     * @param int|null $edge_count edge_count
     *
     * @return self
     */
    public function setEdgeCount($edge_count)
    {
        if (is_null($edge_count)) {
            throw new \InvalidArgumentException('non-nullable edge_count cannot be null');
        }
        $this->container['edge_count'] = $edge_count;

        return $this;
    }

    /**
     * Gets administrative
     *
     * @return \OpenAPI\Client\Model\Administrative|null
     */
    public function getAdministrative()
    {
        return $this->container['administrative'];
    }

    /**
     * Sets administrative
     *
     * @param \OpenAPI\Client\Model\Administrative|null $administrative administrative
     *
     * @return self
     */
    public function setAdministrative($administrative)
    {
        if (is_null($administrative)) {
            throw new \InvalidArgumentException('non-nullable administrative cannot be null');
        }
        $this->container['administrative'] = $administrative;

        return $this;
    }

    /**
     * Gets intersection_type
     *
     * @return string|null
     */
    public function getIntersectionType()
    {
        return $this->container['intersection_type'];
    }

    /**
     * Sets intersection_type
     *
     * @param string|null $intersection_type intersection_type
     *
     * @return self
     */
    public function setIntersectionType($intersection_type)
    {
        if (is_null($intersection_type)) {
            throw new \InvalidArgumentException('non-nullable intersection_type cannot be null');
        }
        $allowedValues = $this->getIntersectionTypeAllowableValues();
        if (!in_array($intersection_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'intersection_type', must be one of '%s'",
                    $intersection_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['intersection_type'] = $intersection_type;

        return $this;
    }

    /**
     * Gets density
     *
     * @return int|null
     */
    public function getDensity()
    {
        return $this->container['density'];
    }

    /**
     * Sets density
     *
     * @param int|null $density density
     *
     * @return self
     */
    public function setDensity($density)
    {
        if (is_null($density)) {
            throw new \InvalidArgumentException('non-nullable density cannot be null');
        }
        $this->container['density'] = $density;

        return $this;
    }

    /**
     * Gets local_edge_count
     *
     * @return int|null
     */
    public function getLocalEdgeCount()
    {
        return $this->container['local_edge_count'];
    }

    /**
     * Sets local_edge_count
     *
     * @param int|null $local_edge_count local_edge_count
     *
     * @return self
     */
    public function setLocalEdgeCount($local_edge_count)
    {
        if (is_null($local_edge_count)) {
            throw new \InvalidArgumentException('non-nullable local_edge_count cannot be null');
        }
        $this->container['local_edge_count'] = $local_edge_count;

        return $this;
    }

    /**
     * Gets mode_change
     *
     * @return bool|null
     */
    public function getModeChange()
    {
        return $this->container['mode_change'];
    }

    /**
     * Sets mode_change
     *
     * @param bool|null $mode_change mode_change
     *
     * @return self
     */
    public function setModeChange($mode_change)
    {
        if (is_null($mode_change)) {
            throw new \InvalidArgumentException('non-nullable mode_change cannot be null');
        }
        $this->container['mode_change'] = $mode_change;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


