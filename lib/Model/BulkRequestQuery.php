<?php
/**
 * BulkRequestQuery
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stadia Maps Geospatial APIs
 *
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 6.6.3
 * Contact: support@stadiamaps.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BulkRequestQuery Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BulkRequestQuery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BulkRequest_query';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'text' => 'string',
        'focus_point_lat' => 'float',
        'focus_point_lon' => 'float',
        'boundary_rect_min_lat' => 'float',
        'boundary_rect_max_lat' => 'float',
        'boundary_rect_min_lon' => 'float',
        'boundary_rect_max_lon' => 'float',
        'boundary_circle_lat' => 'float',
        'boundary_circle_lon' => 'float',
        'boundary_circle_radius' => 'float',
        'boundary_country' => 'string[]',
        'boundary_gid' => 'string',
        'layers' => '\OpenAPI\Client\Model\PeliasLayer[]',
        'sources' => '\OpenAPI\Client\Model\PeliasSource[]',
        'size' => 'int',
        'lang' => 'string',
        'address' => 'string',
        'neighbourhood' => 'string',
        'borough' => 'string',
        'locality' => 'string',
        'county' => 'string',
        'region' => 'string',
        'postal_code' => 'string',
        'country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'text' => null,
        'focus_point_lat' => 'double',
        'focus_point_lon' => 'double',
        'boundary_rect_min_lat' => 'double',
        'boundary_rect_max_lat' => 'double',
        'boundary_rect_min_lon' => 'double',
        'boundary_rect_max_lon' => 'double',
        'boundary_circle_lat' => 'double',
        'boundary_circle_lon' => 'double',
        'boundary_circle_radius' => 'double',
        'boundary_country' => null,
        'boundary_gid' => null,
        'layers' => null,
        'sources' => null,
        'size' => null,
        'lang' => null,
        'address' => null,
        'neighbourhood' => null,
        'borough' => null,
        'locality' => null,
        'county' => null,
        'region' => null,
        'postal_code' => null,
        'country' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'text' => false,
        'focus_point_lat' => false,
        'focus_point_lon' => false,
        'boundary_rect_min_lat' => false,
        'boundary_rect_max_lat' => false,
        'boundary_rect_min_lon' => false,
        'boundary_rect_max_lon' => false,
        'boundary_circle_lat' => false,
        'boundary_circle_lon' => false,
        'boundary_circle_radius' => false,
        'boundary_country' => false,
        'boundary_gid' => false,
        'layers' => false,
        'sources' => false,
        'size' => false,
        'lang' => false,
        'address' => false,
        'neighbourhood' => false,
        'borough' => false,
        'locality' => false,
        'county' => false,
        'region' => false,
        'postal_code' => false,
        'country' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'text' => 'text',
        'focus_point_lat' => 'focus.point.lat',
        'focus_point_lon' => 'focus.point.lon',
        'boundary_rect_min_lat' => 'boundary.rect.min_lat',
        'boundary_rect_max_lat' => 'boundary.rect.max_lat',
        'boundary_rect_min_lon' => 'boundary.rect.min_lon',
        'boundary_rect_max_lon' => 'boundary.rect.max_lon',
        'boundary_circle_lat' => 'boundary.circle.lat',
        'boundary_circle_lon' => 'boundary.circle.lon',
        'boundary_circle_radius' => 'boundary.circle.radius',
        'boundary_country' => 'boundary.country',
        'boundary_gid' => 'boundary.gid',
        'layers' => 'layers',
        'sources' => 'sources',
        'size' => 'size',
        'lang' => 'lang',
        'address' => 'address',
        'neighbourhood' => 'neighbourhood',
        'borough' => 'borough',
        'locality' => 'locality',
        'county' => 'county',
        'region' => 'region',
        'postal_code' => 'postalCode',
        'country' => 'country'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'text' => 'setText',
        'focus_point_lat' => 'setFocusPointLat',
        'focus_point_lon' => 'setFocusPointLon',
        'boundary_rect_min_lat' => 'setBoundaryRectMinLat',
        'boundary_rect_max_lat' => 'setBoundaryRectMaxLat',
        'boundary_rect_min_lon' => 'setBoundaryRectMinLon',
        'boundary_rect_max_lon' => 'setBoundaryRectMaxLon',
        'boundary_circle_lat' => 'setBoundaryCircleLat',
        'boundary_circle_lon' => 'setBoundaryCircleLon',
        'boundary_circle_radius' => 'setBoundaryCircleRadius',
        'boundary_country' => 'setBoundaryCountry',
        'boundary_gid' => 'setBoundaryGid',
        'layers' => 'setLayers',
        'sources' => 'setSources',
        'size' => 'setSize',
        'lang' => 'setLang',
        'address' => 'setAddress',
        'neighbourhood' => 'setNeighbourhood',
        'borough' => 'setBorough',
        'locality' => 'setLocality',
        'county' => 'setCounty',
        'region' => 'setRegion',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'text' => 'getText',
        'focus_point_lat' => 'getFocusPointLat',
        'focus_point_lon' => 'getFocusPointLon',
        'boundary_rect_min_lat' => 'getBoundaryRectMinLat',
        'boundary_rect_max_lat' => 'getBoundaryRectMaxLat',
        'boundary_rect_min_lon' => 'getBoundaryRectMinLon',
        'boundary_rect_max_lon' => 'getBoundaryRectMaxLon',
        'boundary_circle_lat' => 'getBoundaryCircleLat',
        'boundary_circle_lon' => 'getBoundaryCircleLon',
        'boundary_circle_radius' => 'getBoundaryCircleRadius',
        'boundary_country' => 'getBoundaryCountry',
        'boundary_gid' => 'getBoundaryGid',
        'layers' => 'getLayers',
        'sources' => 'getSources',
        'size' => 'getSize',
        'lang' => 'getLang',
        'address' => 'getAddress',
        'neighbourhood' => 'getNeighbourhood',
        'borough' => 'getBorough',
        'locality' => 'getLocality',
        'county' => 'getCounty',
        'region' => 'getRegion',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('focus_point_lat', $data ?? [], null);
        $this->setIfExists('focus_point_lon', $data ?? [], null);
        $this->setIfExists('boundary_rect_min_lat', $data ?? [], null);
        $this->setIfExists('boundary_rect_max_lat', $data ?? [], null);
        $this->setIfExists('boundary_rect_min_lon', $data ?? [], null);
        $this->setIfExists('boundary_rect_max_lon', $data ?? [], null);
        $this->setIfExists('boundary_circle_lat', $data ?? [], null);
        $this->setIfExists('boundary_circle_lon', $data ?? [], null);
        $this->setIfExists('boundary_circle_radius', $data ?? [], null);
        $this->setIfExists('boundary_country', $data ?? [], null);
        $this->setIfExists('boundary_gid', $data ?? [], null);
        $this->setIfExists('layers', $data ?? [], null);
        $this->setIfExists('sources', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('neighbourhood', $data ?? [], null);
        $this->setIfExists('borough', $data ?? [], null);
        $this->setIfExists('locality', $data ?? [], null);
        $this->setIfExists('county', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['focus_point_lat']) && ($this->container['focus_point_lat'] > 90)) {
            $invalidProperties[] = "invalid value for 'focus_point_lat', must be smaller than or equal to 90.";
        }

        if (!is_null($this->container['focus_point_lat']) && ($this->container['focus_point_lat'] < -90)) {
            $invalidProperties[] = "invalid value for 'focus_point_lat', must be bigger than or equal to -90.";
        }

        if (!is_null($this->container['focus_point_lon']) && ($this->container['focus_point_lon'] > 180)) {
            $invalidProperties[] = "invalid value for 'focus_point_lon', must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['focus_point_lon']) && ($this->container['focus_point_lon'] < -180)) {
            $invalidProperties[] = "invalid value for 'focus_point_lon', must be bigger than or equal to -180.";
        }

        if (!is_null($this->container['boundary_rect_min_lat']) && ($this->container['boundary_rect_min_lat'] > 90)) {
            $invalidProperties[] = "invalid value for 'boundary_rect_min_lat', must be smaller than or equal to 90.";
        }

        if (!is_null($this->container['boundary_rect_min_lat']) && ($this->container['boundary_rect_min_lat'] < -90)) {
            $invalidProperties[] = "invalid value for 'boundary_rect_min_lat', must be bigger than or equal to -90.";
        }

        if (!is_null($this->container['boundary_rect_max_lat']) && ($this->container['boundary_rect_max_lat'] > 90)) {
            $invalidProperties[] = "invalid value for 'boundary_rect_max_lat', must be smaller than or equal to 90.";
        }

        if (!is_null($this->container['boundary_rect_max_lat']) && ($this->container['boundary_rect_max_lat'] < -90)) {
            $invalidProperties[] = "invalid value for 'boundary_rect_max_lat', must be bigger than or equal to -90.";
        }

        if (!is_null($this->container['boundary_rect_min_lon']) && ($this->container['boundary_rect_min_lon'] > 180)) {
            $invalidProperties[] = "invalid value for 'boundary_rect_min_lon', must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['boundary_rect_min_lon']) && ($this->container['boundary_rect_min_lon'] < -180)) {
            $invalidProperties[] = "invalid value for 'boundary_rect_min_lon', must be bigger than or equal to -180.";
        }

        if (!is_null($this->container['boundary_rect_max_lon']) && ($this->container['boundary_rect_max_lon'] > 180)) {
            $invalidProperties[] = "invalid value for 'boundary_rect_max_lon', must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['boundary_rect_max_lon']) && ($this->container['boundary_rect_max_lon'] < -180)) {
            $invalidProperties[] = "invalid value for 'boundary_rect_max_lon', must be bigger than or equal to -180.";
        }

        if (!is_null($this->container['boundary_circle_lat']) && ($this->container['boundary_circle_lat'] > 90)) {
            $invalidProperties[] = "invalid value for 'boundary_circle_lat', must be smaller than or equal to 90.";
        }

        if (!is_null($this->container['boundary_circle_lat']) && ($this->container['boundary_circle_lat'] < -90)) {
            $invalidProperties[] = "invalid value for 'boundary_circle_lat', must be bigger than or equal to -90.";
        }

        if (!is_null($this->container['boundary_circle_lon']) && ($this->container['boundary_circle_lon'] > 180)) {
            $invalidProperties[] = "invalid value for 'boundary_circle_lon', must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['boundary_circle_lon']) && ($this->container['boundary_circle_lon'] < -180)) {
            $invalidProperties[] = "invalid value for 'boundary_circle_lon', must be bigger than or equal to -180.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text The place name (address, venue name, etc.) to search for.
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets focus_point_lat
     *
     * @return float|null
     */
    public function getFocusPointLat()
    {
        return $this->container['focus_point_lat'];
    }

    /**
     * Sets focus_point_lat
     *
     * @param float|null $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires `focus.point.lon`.
     *
     * @return self
     */
    public function setFocusPointLat($focus_point_lat)
    {
        if (is_null($focus_point_lat)) {
            throw new \InvalidArgumentException('non-nullable focus_point_lat cannot be null');
        }

        if (($focus_point_lat > 90)) {
            throw new \InvalidArgumentException('invalid value for $focus_point_lat when calling BulkRequestQuery., must be smaller than or equal to 90.');
        }
        if (($focus_point_lat < -90)) {
            throw new \InvalidArgumentException('invalid value for $focus_point_lat when calling BulkRequestQuery., must be bigger than or equal to -90.');
        }

        $this->container['focus_point_lat'] = $focus_point_lat;

        return $this;
    }

    /**
     * Gets focus_point_lon
     *
     * @return float|null
     */
    public function getFocusPointLon()
    {
        return $this->container['focus_point_lon'];
    }

    /**
     * Sets focus_point_lon
     *
     * @param float|null $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires `focus.point.lat`.
     *
     * @return self
     */
    public function setFocusPointLon($focus_point_lon)
    {
        if (is_null($focus_point_lon)) {
            throw new \InvalidArgumentException('non-nullable focus_point_lon cannot be null');
        }

        if (($focus_point_lon > 180)) {
            throw new \InvalidArgumentException('invalid value for $focus_point_lon when calling BulkRequestQuery., must be smaller than or equal to 180.');
        }
        if (($focus_point_lon < -180)) {
            throw new \InvalidArgumentException('invalid value for $focus_point_lon when calling BulkRequestQuery., must be bigger than or equal to -180.');
        }

        $this->container['focus_point_lon'] = $focus_point_lon;

        return $this;
    }

    /**
     * Gets boundary_rect_min_lat
     *
     * @return float|null
     */
    public function getBoundaryRectMinLat()
    {
        return $this->container['boundary_rect_min_lat'];
    }

    /**
     * Sets boundary_rect_min_lat
     *
     * @param float|null $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
     *
     * @return self
     */
    public function setBoundaryRectMinLat($boundary_rect_min_lat)
    {
        if (is_null($boundary_rect_min_lat)) {
            throw new \InvalidArgumentException('non-nullable boundary_rect_min_lat cannot be null');
        }

        if (($boundary_rect_min_lat > 90)) {
            throw new \InvalidArgumentException('invalid value for $boundary_rect_min_lat when calling BulkRequestQuery., must be smaller than or equal to 90.');
        }
        if (($boundary_rect_min_lat < -90)) {
            throw new \InvalidArgumentException('invalid value for $boundary_rect_min_lat when calling BulkRequestQuery., must be bigger than or equal to -90.');
        }

        $this->container['boundary_rect_min_lat'] = $boundary_rect_min_lat;

        return $this;
    }

    /**
     * Gets boundary_rect_max_lat
     *
     * @return float|null
     */
    public function getBoundaryRectMaxLat()
    {
        return $this->container['boundary_rect_max_lat'];
    }

    /**
     * Sets boundary_rect_max_lat
     *
     * @param float|null $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
     *
     * @return self
     */
    public function setBoundaryRectMaxLat($boundary_rect_max_lat)
    {
        if (is_null($boundary_rect_max_lat)) {
            throw new \InvalidArgumentException('non-nullable boundary_rect_max_lat cannot be null');
        }

        if (($boundary_rect_max_lat > 90)) {
            throw new \InvalidArgumentException('invalid value for $boundary_rect_max_lat when calling BulkRequestQuery., must be smaller than or equal to 90.');
        }
        if (($boundary_rect_max_lat < -90)) {
            throw new \InvalidArgumentException('invalid value for $boundary_rect_max_lat when calling BulkRequestQuery., must be bigger than or equal to -90.');
        }

        $this->container['boundary_rect_max_lat'] = $boundary_rect_max_lat;

        return $this;
    }

    /**
     * Gets boundary_rect_min_lon
     *
     * @return float|null
     */
    public function getBoundaryRectMinLon()
    {
        return $this->container['boundary_rect_min_lon'];
    }

    /**
     * Sets boundary_rect_min_lon
     *
     * @param float|null $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
     *
     * @return self
     */
    public function setBoundaryRectMinLon($boundary_rect_min_lon)
    {
        if (is_null($boundary_rect_min_lon)) {
            throw new \InvalidArgumentException('non-nullable boundary_rect_min_lon cannot be null');
        }

        if (($boundary_rect_min_lon > 180)) {
            throw new \InvalidArgumentException('invalid value for $boundary_rect_min_lon when calling BulkRequestQuery., must be smaller than or equal to 180.');
        }
        if (($boundary_rect_min_lon < -180)) {
            throw new \InvalidArgumentException('invalid value for $boundary_rect_min_lon when calling BulkRequestQuery., must be bigger than or equal to -180.');
        }

        $this->container['boundary_rect_min_lon'] = $boundary_rect_min_lon;

        return $this;
    }

    /**
     * Gets boundary_rect_max_lon
     *
     * @return float|null
     */
    public function getBoundaryRectMaxLon()
    {
        return $this->container['boundary_rect_max_lon'];
    }

    /**
     * Sets boundary_rect_max_lon
     *
     * @param float|null $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
     *
     * @return self
     */
    public function setBoundaryRectMaxLon($boundary_rect_max_lon)
    {
        if (is_null($boundary_rect_max_lon)) {
            throw new \InvalidArgumentException('non-nullable boundary_rect_max_lon cannot be null');
        }

        if (($boundary_rect_max_lon > 180)) {
            throw new \InvalidArgumentException('invalid value for $boundary_rect_max_lon when calling BulkRequestQuery., must be smaller than or equal to 180.');
        }
        if (($boundary_rect_max_lon < -180)) {
            throw new \InvalidArgumentException('invalid value for $boundary_rect_max_lon when calling BulkRequestQuery., must be bigger than or equal to -180.');
        }

        $this->container['boundary_rect_max_lon'] = $boundary_rect_max_lon;

        return $this;
    }

    /**
     * Gets boundary_circle_lat
     *
     * @return float|null
     */
    public function getBoundaryCircleLat()
    {
        return $this->container['boundary_circle_lat'];
    }

    /**
     * Sets boundary_circle_lat
     *
     * @param float|null $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires `boundary.circle.lon`.
     *
     * @return self
     */
    public function setBoundaryCircleLat($boundary_circle_lat)
    {
        if (is_null($boundary_circle_lat)) {
            throw new \InvalidArgumentException('non-nullable boundary_circle_lat cannot be null');
        }

        if (($boundary_circle_lat > 90)) {
            throw new \InvalidArgumentException('invalid value for $boundary_circle_lat when calling BulkRequestQuery., must be smaller than or equal to 90.');
        }
        if (($boundary_circle_lat < -90)) {
            throw new \InvalidArgumentException('invalid value for $boundary_circle_lat when calling BulkRequestQuery., must be bigger than or equal to -90.');
        }

        $this->container['boundary_circle_lat'] = $boundary_circle_lat;

        return $this;
    }

    /**
     * Gets boundary_circle_lon
     *
     * @return float|null
     */
    public function getBoundaryCircleLon()
    {
        return $this->container['boundary_circle_lon'];
    }

    /**
     * Sets boundary_circle_lon
     *
     * @param float|null $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires `boundary.circle.lat`.
     *
     * @return self
     */
    public function setBoundaryCircleLon($boundary_circle_lon)
    {
        if (is_null($boundary_circle_lon)) {
            throw new \InvalidArgumentException('non-nullable boundary_circle_lon cannot be null');
        }

        if (($boundary_circle_lon > 180)) {
            throw new \InvalidArgumentException('invalid value for $boundary_circle_lon when calling BulkRequestQuery., must be smaller than or equal to 180.');
        }
        if (($boundary_circle_lon < -180)) {
            throw new \InvalidArgumentException('invalid value for $boundary_circle_lon when calling BulkRequestQuery., must be bigger than or equal to -180.');
        }

        $this->container['boundary_circle_lon'] = $boundary_circle_lon;

        return $this;
    }

    /**
     * Gets boundary_circle_radius
     *
     * @return float|null
     */
    public function getBoundaryCircleRadius()
    {
        return $this->container['boundary_circle_radius'];
    }

    /**
     * Sets boundary_circle_radius
     *
     * @param float|null $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified.
     *
     * @return self
     */
    public function setBoundaryCircleRadius($boundary_circle_radius)
    {
        if (is_null($boundary_circle_radius)) {
            throw new \InvalidArgumentException('non-nullable boundary_circle_radius cannot be null');
        }
        $this->container['boundary_circle_radius'] = $boundary_circle_radius;

        return $this;
    }

    /**
     * Gets boundary_country
     *
     * @return string[]|null
     */
    public function getBoundaryCountry()
    {
        return $this->container['boundary_country'];
    }

    /**
     * Sets boundary_country
     *
     * @param string[]|null $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible.
     *
     * @return self
     */
    public function setBoundaryCountry($boundary_country)
    {
        if (is_null($boundary_country)) {
            throw new \InvalidArgumentException('non-nullable boundary_country cannot be null');
        }
        $this->container['boundary_country'] = $boundary_country;

        return $this;
    }

    /**
     * Gets boundary_gid
     *
     * @return string|null
     */
    public function getBoundaryGid()
    {
        return $this->container['boundary_gid'];
    }

    /**
     * Sets boundary_gid
     *
     * @param string|null $boundary_gid The Pelias GID of an area to limit the search to.
     *
     * @return self
     */
    public function setBoundaryGid($boundary_gid)
    {
        if (is_null($boundary_gid)) {
            throw new \InvalidArgumentException('non-nullable boundary_gid cannot be null');
        }
        $this->container['boundary_gid'] = $boundary_gid;

        return $this;
    }

    /**
     * Gets layers
     *
     * @return \OpenAPI\Client\Model\PeliasLayer[]|null
     */
    public function getLayers()
    {
        return $this->container['layers'];
    }

    /**
     * Sets layers
     *
     * @param \OpenAPI\Client\Model\PeliasLayer[]|null $layers A list of layers to limit the search to.
     *
     * @return self
     */
    public function setLayers($layers)
    {
        if (is_null($layers)) {
            throw new \InvalidArgumentException('non-nullable layers cannot be null');
        }
        $this->container['layers'] = $layers;

        return $this;
    }

    /**
     * Gets sources
     *
     * @return \OpenAPI\Client\Model\PeliasSource[]|null
     */
    public function getSources()
    {
        return $this->container['sources'];
    }

    /**
     * Sets sources
     *
     * @param \OpenAPI\Client\Model\PeliasSource[]|null $sources A list of sources to limit the search to.
     *
     * @return self
     */
    public function setSources($sources)
    {
        if (is_null($sources)) {
            throw new \InvalidArgumentException('non-nullable sources cannot be null');
        }
        $this->container['sources'] = $sources;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size The maximum number of results to return.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a `langtag` (in RFC 5646 terms) can contain script, region, etc., only the `language` portion, an ISO 639 code, will be considered. So `en-US` and `en-GB` will both be treated as English.
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address A street name, optionally with a house number.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets neighbourhood
     *
     * @return string|null
     */
    public function getNeighbourhood()
    {
        return $this->container['neighbourhood'];
    }

    /**
     * Sets neighbourhood
     *
     * @param string|null $neighbourhood Varies by area, but has a locally specific meaning (NOT always an official administrative unit).
     *
     * @return self
     */
    public function setNeighbourhood($neighbourhood)
    {
        if (is_null($neighbourhood)) {
            throw new \InvalidArgumentException('non-nullable neighbourhood cannot be null');
        }
        $this->container['neighbourhood'] = $neighbourhood;

        return $this;
    }

    /**
     * Gets borough
     *
     * @return string|null
     */
    public function getBorough()
    {
        return $this->container['borough'];
    }

    /**
     * Sets borough
     *
     * @param string|null $borough A unit within a city (not widely used, but present in places like NYC and Mexico City).
     *
     * @return self
     */
    public function setBorough($borough)
    {
        if (is_null($borough)) {
            throw new \InvalidArgumentException('non-nullable borough cannot be null');
        }
        $this->container['borough'] = $borough;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string|null
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string|null $locality The city, village, town, etc. that the place/address is part of.
     *
     * @return self
     */
    public function setLocality($locality)
    {
        if (is_null($locality)) {
            throw new \InvalidArgumentException('non-nullable locality cannot be null');
        }
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county Administrative divisions between localities and regions. Not commonly used as input to structured geocoding.
     *
     * @return self
     */
    public function setCounty($county)
    {
        if (is_null($county)) {
            throw new \InvalidArgumentException('non-nullable county cannot be null');
        }
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region Typically the first administrative division within a country. For example, a US state or a Canadian province.
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code A mail sorting code.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country A full name (ex: Canada), or a 2 or 3 character ISO code. Prefer ISO codes when possible.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


