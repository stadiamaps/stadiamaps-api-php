<?php
/**
 * OsrmStepManeuver
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stadia Maps Geospatial APIs
 *
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 7.0.0
 * Contact: support@stadiamaps.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OsrmStepManeuver Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OsrmStepManeuver implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'osrmStepManeuver';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'location' => 'float[]',
        'instruction' => 'string',
        'bearing_before' => 'int',
        'bearing_after' => 'int',
        'type' => 'string',
        'modifier' => '\OpenAPI\Client\Model\OsrmGuidanceModifier',
        'exit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'location' => 'double',
        'instruction' => null,
        'bearing_before' => null,
        'bearing_after' => null,
        'type' => null,
        'modifier' => null,
        'exit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'location' => false,
        'instruction' => false,
        'bearing_before' => false,
        'bearing_after' => false,
        'type' => false,
        'modifier' => true,
        'exit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'location' => 'location',
        'instruction' => 'instruction',
        'bearing_before' => 'bearing_before',
        'bearing_after' => 'bearing_after',
        'type' => 'type',
        'modifier' => 'modifier',
        'exit' => 'exit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'location' => 'setLocation',
        'instruction' => 'setInstruction',
        'bearing_before' => 'setBearingBefore',
        'bearing_after' => 'setBearingAfter',
        'type' => 'setType',
        'modifier' => 'setModifier',
        'exit' => 'setExit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'location' => 'getLocation',
        'instruction' => 'getInstruction',
        'bearing_before' => 'getBearingBefore',
        'bearing_after' => 'getBearingAfter',
        'type' => 'getType',
        'modifier' => 'getModifier',
        'exit' => 'getExit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_TURN = 'turn';
    public const TYPE_NEW_NAME = 'new name';
    public const TYPE_DEPART = 'depart';
    public const TYPE_ARRIVE = 'arrive';
    public const TYPE_MERGE = 'merge';
    public const TYPE_RAMP = 'ramp';
    public const TYPE_ON_RAMP = 'on ramp';
    public const TYPE_OFF_RAMP = 'off ramp';
    public const TYPE_FORK = 'fork';
    public const TYPE_END_OF_ROAD = 'end of road';
    public const TYPE_USE_LANE = 'use lane';
    public const TYPE__CONTINUE = 'continue';
    public const TYPE_ROUNDABOUT = 'roundabout';
    public const TYPE_ROTARY = 'rotary';
    public const TYPE_ROUNDABOUT_TURN = 'roundabout turn';
    public const TYPE_NOTIFICATION = 'notification';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TURN,
            self::TYPE_NEW_NAME,
            self::TYPE_DEPART,
            self::TYPE_ARRIVE,
            self::TYPE_MERGE,
            self::TYPE_RAMP,
            self::TYPE_ON_RAMP,
            self::TYPE_OFF_RAMP,
            self::TYPE_FORK,
            self::TYPE_END_OF_ROAD,
            self::TYPE_USE_LANE,
            self::TYPE__CONTINUE,
            self::TYPE_ROUNDABOUT,
            self::TYPE_ROTARY,
            self::TYPE_ROUNDABOUT_TURN,
            self::TYPE_NOTIFICATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('instruction', $data ?? [], null);
        $this->setIfExists('bearing_before', $data ?? [], null);
        $this->setIfExists('bearing_after', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('modifier', $data ?? [], null);
        $this->setIfExists('exit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ((count($this->container['location']) > 2)) {
            $invalidProperties[] = "invalid value for 'location', number of items must be less than or equal to 2.";
        }

        if ((count($this->container['location']) < 2)) {
            $invalidProperties[] = "invalid value for 'location', number of items must be greater than or equal to 2.";
        }

        if ($this->container['bearing_before'] === null) {
            $invalidProperties[] = "'bearing_before' can't be null";
        }
        if ($this->container['bearing_after'] === null) {
            $invalidProperties[] = "'bearing_after' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets location
     *
     * @return float[]
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param float[] $location A (longitude, latitude) coordinate pair.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }

        if ((count($location) > 2)) {
            throw new \InvalidArgumentException('invalid value for $location when calling OsrmStepManeuver., number of items must be less than or equal to 2.');
        }
        if ((count($location) < 2)) {
            throw new \InvalidArgumentException('invalid length for $location when calling OsrmStepManeuver., number of items must be greater than or equal to 2.');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets instruction
     *
     * @return string|null
     */
    public function getInstruction()
    {
        return $this->container['instruction'];
    }

    /**
     * Sets instruction
     *
     * @param string|null $instruction A human-readable instruction for the maneuver.
     *
     * @return self
     */
    public function setInstruction($instruction)
    {
        if (is_null($instruction)) {
            throw new \InvalidArgumentException('non-nullable instruction cannot be null');
        }
        $this->container['instruction'] = $instruction;

        return $this;
    }

    /**
     * Gets bearing_before
     *
     * @return int
     */
    public function getBearingBefore()
    {
        return $this->container['bearing_before'];
    }

    /**
     * Sets bearing_before
     *
     * @param int $bearing_before The clockwise angle from true north to the direction of travel immediately before the maneuver.
     *
     * @return self
     */
    public function setBearingBefore($bearing_before)
    {
        if (is_null($bearing_before)) {
            throw new \InvalidArgumentException('non-nullable bearing_before cannot be null');
        }
        $this->container['bearing_before'] = $bearing_before;

        return $this;
    }

    /**
     * Gets bearing_after
     *
     * @return int
     */
    public function getBearingAfter()
    {
        return $this->container['bearing_after'];
    }

    /**
     * Sets bearing_after
     *
     * @param int $bearing_after The clockwise angle from true north to the direction of travel immediately after the maneuver.
     *
     * @return self
     */
    public function setBearingAfter($bearing_after)
    {
        if (is_null($bearing_after)) {
            throw new \InvalidArgumentException('non-nullable bearing_after cannot be null');
        }
        $this->container['bearing_after'] = $bearing_after;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets modifier
     *
     * @return \OpenAPI\Client\Model\OsrmGuidanceModifier|null
     */
    public function getModifier()
    {
        return $this->container['modifier'];
    }

    /**
     * Sets modifier
     *
     * @param \OpenAPI\Client\Model\OsrmGuidanceModifier|null $modifier modifier
     *
     * @return self
     */
    public function setModifier($modifier)
    {
        if (is_null($modifier)) {
            array_push($this->openAPINullablesSetToNull, 'modifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modifier'] = $modifier;

        return $this;
    }

    /**
     * Gets exit
     *
     * @return int|null
     */
    public function getExit()
    {
        return $this->container['exit'];
    }

    /**
     * Sets exit
     *
     * @param int|null $exit The exit number to take (for roundabouts, rotaries, and number of intersections).
     *
     * @return self
     */
    public function setExit($exit)
    {
        if (is_null($exit)) {
            throw new \InvalidArgumentException('non-nullable exit cannot be null');
        }
        $this->container['exit'] = $exit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


