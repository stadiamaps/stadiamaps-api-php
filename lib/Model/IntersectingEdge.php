<?php
/**
 * IntersectingEdge
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stadia Maps Geospatial APIs
 *
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 6.5.0
 * Contact: support@stadiamaps.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IntersectingEdge Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IntersectingEdge implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'intersectingEdge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'begin_heading' => 'int',
        'from_edge_name_consistency' => 'bool',
        'to_edge_name_consistency' => 'bool',
        'driveability' => '\OpenAPI\Client\Model\Traversability',
        'cyclability' => '\OpenAPI\Client\Model\Traversability',
        'walkability' => '\OpenAPI\Client\Model\Traversability',
        'use' => '\OpenAPI\Client\Model\EdgeUse',
        'road_class' => '\OpenAPI\Client\Model\RoadClass'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'begin_heading' => null,
        'from_edge_name_consistency' => null,
        'to_edge_name_consistency' => null,
        'driveability' => null,
        'cyclability' => null,
        'walkability' => null,
        'use' => null,
        'road_class' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'begin_heading' => false,
        'from_edge_name_consistency' => false,
        'to_edge_name_consistency' => false,
        'driveability' => false,
        'cyclability' => false,
        'walkability' => false,
        'use' => false,
        'road_class' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'begin_heading' => 'begin_heading',
        'from_edge_name_consistency' => 'from_edge_name_consistency',
        'to_edge_name_consistency' => 'to_edge_name_consistency',
        'driveability' => 'driveability',
        'cyclability' => 'cyclability',
        'walkability' => 'walkability',
        'use' => 'use',
        'road_class' => 'road_class'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'begin_heading' => 'setBeginHeading',
        'from_edge_name_consistency' => 'setFromEdgeNameConsistency',
        'to_edge_name_consistency' => 'setToEdgeNameConsistency',
        'driveability' => 'setDriveability',
        'cyclability' => 'setCyclability',
        'walkability' => 'setWalkability',
        'use' => 'setUse',
        'road_class' => 'setRoadClass'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'begin_heading' => 'getBeginHeading',
        'from_edge_name_consistency' => 'getFromEdgeNameConsistency',
        'to_edge_name_consistency' => 'getToEdgeNameConsistency',
        'driveability' => 'getDriveability',
        'cyclability' => 'getCyclability',
        'walkability' => 'getWalkability',
        'use' => 'getUse',
        'road_class' => 'getRoadClass'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('begin_heading', $data ?? [], null);
        $this->setIfExists('from_edge_name_consistency', $data ?? [], null);
        $this->setIfExists('to_edge_name_consistency', $data ?? [], null);
        $this->setIfExists('driveability', $data ?? [], null);
        $this->setIfExists('cyclability', $data ?? [], null);
        $this->setIfExists('walkability', $data ?? [], null);
        $this->setIfExists('use', $data ?? [], null);
        $this->setIfExists('road_class', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets begin_heading
     *
     * @return int|null
     */
    public function getBeginHeading()
    {
        return $this->container['begin_heading'];
    }

    /**
     * Sets begin_heading
     *
     * @param int|null $begin_heading The direction at the beginning of an edge. The units are degrees clockwise from north.
     *
     * @return self
     */
    public function setBeginHeading($begin_heading)
    {
        if (is_null($begin_heading)) {
            throw new \InvalidArgumentException('non-nullable begin_heading cannot be null');
        }
        $this->container['begin_heading'] = $begin_heading;

        return $this;
    }

    /**
     * Gets from_edge_name_consistency
     *
     * @return bool|null
     */
    public function getFromEdgeNameConsistency()
    {
        return $this->container['from_edge_name_consistency'];
    }

    /**
     * Sets from_edge_name_consistency
     *
     * @param bool|null $from_edge_name_consistency True if this intersecting edge at the end node has consistent names with the path from the other edge.
     *
     * @return self
     */
    public function setFromEdgeNameConsistency($from_edge_name_consistency)
    {
        if (is_null($from_edge_name_consistency)) {
            throw new \InvalidArgumentException('non-nullable from_edge_name_consistency cannot be null');
        }
        $this->container['from_edge_name_consistency'] = $from_edge_name_consistency;

        return $this;
    }

    /**
     * Gets to_edge_name_consistency
     *
     * @return bool|null
     */
    public function getToEdgeNameConsistency()
    {
        return $this->container['to_edge_name_consistency'];
    }

    /**
     * Sets to_edge_name_consistency
     *
     * @param bool|null $to_edge_name_consistency True if this intersecting edge at the end node has consistent names with the path to the other edge.
     *
     * @return self
     */
    public function setToEdgeNameConsistency($to_edge_name_consistency)
    {
        if (is_null($to_edge_name_consistency)) {
            throw new \InvalidArgumentException('non-nullable to_edge_name_consistency cannot be null');
        }
        $this->container['to_edge_name_consistency'] = $to_edge_name_consistency;

        return $this;
    }

    /**
     * Gets driveability
     *
     * @return \OpenAPI\Client\Model\Traversability|null
     */
    public function getDriveability()
    {
        return $this->container['driveability'];
    }

    /**
     * Sets driveability
     *
     * @param \OpenAPI\Client\Model\Traversability|null $driveability driveability
     *
     * @return self
     */
    public function setDriveability($driveability)
    {
        if (is_null($driveability)) {
            throw new \InvalidArgumentException('non-nullable driveability cannot be null');
        }
        $this->container['driveability'] = $driveability;

        return $this;
    }

    /**
     * Gets cyclability
     *
     * @return \OpenAPI\Client\Model\Traversability|null
     */
    public function getCyclability()
    {
        return $this->container['cyclability'];
    }

    /**
     * Sets cyclability
     *
     * @param \OpenAPI\Client\Model\Traversability|null $cyclability cyclability
     *
     * @return self
     */
    public function setCyclability($cyclability)
    {
        if (is_null($cyclability)) {
            throw new \InvalidArgumentException('non-nullable cyclability cannot be null');
        }
        $this->container['cyclability'] = $cyclability;

        return $this;
    }

    /**
     * Gets walkability
     *
     * @return \OpenAPI\Client\Model\Traversability|null
     */
    public function getWalkability()
    {
        return $this->container['walkability'];
    }

    /**
     * Sets walkability
     *
     * @param \OpenAPI\Client\Model\Traversability|null $walkability walkability
     *
     * @return self
     */
    public function setWalkability($walkability)
    {
        if (is_null($walkability)) {
            throw new \InvalidArgumentException('non-nullable walkability cannot be null');
        }
        $this->container['walkability'] = $walkability;

        return $this;
    }

    /**
     * Gets use
     *
     * @return \OpenAPI\Client\Model\EdgeUse|null
     */
    public function getUse()
    {
        return $this->container['use'];
    }

    /**
     * Sets use
     *
     * @param \OpenAPI\Client\Model\EdgeUse|null $use use
     *
     * @return self
     */
    public function setUse($use)
    {
        if (is_null($use)) {
            throw new \InvalidArgumentException('non-nullable use cannot be null');
        }
        $this->container['use'] = $use;

        return $this;
    }

    /**
     * Gets road_class
     *
     * @return \OpenAPI\Client\Model\RoadClass|null
     */
    public function getRoadClass()
    {
        return $this->container['road_class'];
    }

    /**
     * Sets road_class
     *
     * @param \OpenAPI\Client\Model\RoadClass|null $road_class road_class
     *
     * @return self
     */
    public function setRoadClass($road_class)
    {
        if (is_null($road_class)) {
            throw new \InvalidArgumentException('non-nullable road_class cannot be null');
        }
        $this->container['road_class'] = $road_class;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


