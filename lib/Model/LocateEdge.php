<?php
/**
 * LocateEdge
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stadia Maps Geospatial APIs
 *
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 6.6.3
 * Contact: support@stadiamaps.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LocateEdge Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LocateEdge implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'locateEdge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'edge_id' => '\OpenAPI\Client\Model\NodeId',
        'way_id' => 'int',
        'correlated_lat' => 'float',
        'correlated_lon' => 'float',
        'percent_along' => 'float',
        'side_of_street' => 'string',
        'linear_reference' => 'string',
        'outbound_reach' => 'int',
        'heading' => 'float',
        'inbound_reach' => 'int',
        'distance' => 'float',
        'predicted_speeds' => 'int[]',
        'edge_info' => '\OpenAPI\Client\Model\LocateEdgeInfo',
        'edge' => '\OpenAPI\Client\Model\LocateDetailedEdge',
        'warnings' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'edge_id' => null,
        'way_id' => null,
        'correlated_lat' => 'double',
        'correlated_lon' => 'double',
        'percent_along' => 'double',
        'side_of_street' => null,
        'linear_reference' => null,
        'outbound_reach' => null,
        'heading' => 'float',
        'inbound_reach' => null,
        'distance' => 'float',
        'predicted_speeds' => null,
        'edge_info' => null,
        'edge' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'edge_id' => false,
        'way_id' => false,
        'correlated_lat' => false,
        'correlated_lon' => false,
        'percent_along' => false,
        'side_of_street' => false,
        'linear_reference' => false,
        'outbound_reach' => false,
        'heading' => false,
        'inbound_reach' => false,
        'distance' => false,
        'predicted_speeds' => false,
        'edge_info' => false,
        'edge' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'edge_id' => 'edge_id',
        'way_id' => 'way_id',
        'correlated_lat' => 'correlated_lat',
        'correlated_lon' => 'correlated_lon',
        'percent_along' => 'percent_along',
        'side_of_street' => 'side_of_street',
        'linear_reference' => 'linear_reference',
        'outbound_reach' => 'outbound_reach',
        'heading' => 'heading',
        'inbound_reach' => 'inbound_reach',
        'distance' => 'distance',
        'predicted_speeds' => 'predicted_speeds',
        'edge_info' => 'edge_info',
        'edge' => 'edge',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'edge_id' => 'setEdgeId',
        'way_id' => 'setWayId',
        'correlated_lat' => 'setCorrelatedLat',
        'correlated_lon' => 'setCorrelatedLon',
        'percent_along' => 'setPercentAlong',
        'side_of_street' => 'setSideOfStreet',
        'linear_reference' => 'setLinearReference',
        'outbound_reach' => 'setOutboundReach',
        'heading' => 'setHeading',
        'inbound_reach' => 'setInboundReach',
        'distance' => 'setDistance',
        'predicted_speeds' => 'setPredictedSpeeds',
        'edge_info' => 'setEdgeInfo',
        'edge' => 'setEdge',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'edge_id' => 'getEdgeId',
        'way_id' => 'getWayId',
        'correlated_lat' => 'getCorrelatedLat',
        'correlated_lon' => 'getCorrelatedLon',
        'percent_along' => 'getPercentAlong',
        'side_of_street' => 'getSideOfStreet',
        'linear_reference' => 'getLinearReference',
        'outbound_reach' => 'getOutboundReach',
        'heading' => 'getHeading',
        'inbound_reach' => 'getInboundReach',
        'distance' => 'getDistance',
        'predicted_speeds' => 'getPredictedSpeeds',
        'edge_info' => 'getEdgeInfo',
        'edge' => 'getEdge',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SIDE_OF_STREET_LEFT = 'left';
    public const SIDE_OF_STREET_RIGHT = 'right';
    public const SIDE_OF_STREET_NEITHER = 'neither';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSideOfStreetAllowableValues()
    {
        return [
            self::SIDE_OF_STREET_LEFT,
            self::SIDE_OF_STREET_RIGHT,
            self::SIDE_OF_STREET_NEITHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('edge_id', $data ?? [], null);
        $this->setIfExists('way_id', $data ?? [], null);
        $this->setIfExists('correlated_lat', $data ?? [], null);
        $this->setIfExists('correlated_lon', $data ?? [], null);
        $this->setIfExists('percent_along', $data ?? [], null);
        $this->setIfExists('side_of_street', $data ?? [], null);
        $this->setIfExists('linear_reference', $data ?? [], null);
        $this->setIfExists('outbound_reach', $data ?? [], null);
        $this->setIfExists('heading', $data ?? [], null);
        $this->setIfExists('inbound_reach', $data ?? [], null);
        $this->setIfExists('distance', $data ?? [], null);
        $this->setIfExists('predicted_speeds', $data ?? [], null);
        $this->setIfExists('edge_info', $data ?? [], null);
        $this->setIfExists('edge', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['correlated_lat'] === null) {
            $invalidProperties[] = "'correlated_lat' can't be null";
        }
        if ($this->container['correlated_lon'] === null) {
            $invalidProperties[] = "'correlated_lon' can't be null";
        }
        if ($this->container['percent_along'] === null) {
            $invalidProperties[] = "'percent_along' can't be null";
        }
        if ($this->container['side_of_street'] === null) {
            $invalidProperties[] = "'side_of_street' can't be null";
        }
        $allowedValues = $this->getSideOfStreetAllowableValues();
        if (!is_null($this->container['side_of_street']) && !in_array($this->container['side_of_street'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'side_of_street', must be one of '%s'",
                $this->container['side_of_street'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets edge_id
     *
     * @return \OpenAPI\Client\Model\NodeId|null
     */
    public function getEdgeId()
    {
        return $this->container['edge_id'];
    }

    /**
     * Sets edge_id
     *
     * @param \OpenAPI\Client\Model\NodeId|null $edge_id edge_id
     *
     * @return self
     */
    public function setEdgeId($edge_id)
    {
        if (is_null($edge_id)) {
            throw new \InvalidArgumentException('non-nullable edge_id cannot be null');
        }
        $this->container['edge_id'] = $edge_id;

        return $this;
    }

    /**
     * Gets way_id
     *
     * @return int|null
     */
    public function getWayId()
    {
        return $this->container['way_id'];
    }

    /**
     * Sets way_id
     *
     * @param int|null $way_id The OSM way ID associated with this edge (absent in verbose response; see the edge info).
     *
     * @return self
     */
    public function setWayId($way_id)
    {
        if (is_null($way_id)) {
            throw new \InvalidArgumentException('non-nullable way_id cannot be null');
        }
        $this->container['way_id'] = $way_id;

        return $this;
    }

    /**
     * Gets correlated_lat
     *
     * @return float
     */
    public function getCorrelatedLat()
    {
        return $this->container['correlated_lat'];
    }

    /**
     * Sets correlated_lat
     *
     * @param float $correlated_lat correlated_lat
     *
     * @return self
     */
    public function setCorrelatedLat($correlated_lat)
    {
        if (is_null($correlated_lat)) {
            throw new \InvalidArgumentException('non-nullable correlated_lat cannot be null');
        }
        $this->container['correlated_lat'] = $correlated_lat;

        return $this;
    }

    /**
     * Gets correlated_lon
     *
     * @return float
     */
    public function getCorrelatedLon()
    {
        return $this->container['correlated_lon'];
    }

    /**
     * Sets correlated_lon
     *
     * @param float $correlated_lon correlated_lon
     *
     * @return self
     */
    public function setCorrelatedLon($correlated_lon)
    {
        if (is_null($correlated_lon)) {
            throw new \InvalidArgumentException('non-nullable correlated_lon cannot be null');
        }
        $this->container['correlated_lon'] = $correlated_lon;

        return $this;
    }

    /**
     * Gets percent_along
     *
     * @return float
     */
    public function getPercentAlong()
    {
        return $this->container['percent_along'];
    }

    /**
     * Sets percent_along
     *
     * @param float $percent_along percent_along
     *
     * @return self
     */
    public function setPercentAlong($percent_along)
    {
        if (is_null($percent_along)) {
            throw new \InvalidArgumentException('non-nullable percent_along cannot be null');
        }
        $this->container['percent_along'] = $percent_along;

        return $this;
    }

    /**
     * Gets side_of_street
     *
     * @return string
     */
    public function getSideOfStreet()
    {
        return $this->container['side_of_street'];
    }

    /**
     * Sets side_of_street
     *
     * @param string $side_of_street side_of_street
     *
     * @return self
     */
    public function setSideOfStreet($side_of_street)
    {
        if (is_null($side_of_street)) {
            throw new \InvalidArgumentException('non-nullable side_of_street cannot be null');
        }
        $allowedValues = $this->getSideOfStreetAllowableValues();
        if (!in_array($side_of_street, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'side_of_street', must be one of '%s'",
                    $side_of_street,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['side_of_street'] = $side_of_street;

        return $this;
    }

    /**
     * Gets linear_reference
     *
     * @return string|null
     */
    public function getLinearReference()
    {
        return $this->container['linear_reference'];
    }

    /**
     * Sets linear_reference
     *
     * @param string|null $linear_reference A base64-encoded [OpenLR location reference](https://www.openlr-association.com/fileadmin/user_upload/openlr-whitepaper_v1.5.pdf), for a graph edge of the road network matched by the query.
     *
     * @return self
     */
    public function setLinearReference($linear_reference)
    {
        if (is_null($linear_reference)) {
            throw new \InvalidArgumentException('non-nullable linear_reference cannot be null');
        }
        $this->container['linear_reference'] = $linear_reference;

        return $this;
    }

    /**
     * Gets outbound_reach
     *
     * @return int|null
     */
    public function getOutboundReach()
    {
        return $this->container['outbound_reach'];
    }

    /**
     * Sets outbound_reach
     *
     * @param int|null $outbound_reach outbound_reach
     *
     * @return self
     */
    public function setOutboundReach($outbound_reach)
    {
        if (is_null($outbound_reach)) {
            throw new \InvalidArgumentException('non-nullable outbound_reach cannot be null');
        }
        $this->container['outbound_reach'] = $outbound_reach;

        return $this;
    }

    /**
     * Gets heading
     *
     * @return float|null
     */
    public function getHeading()
    {
        return $this->container['heading'];
    }

    /**
     * Sets heading
     *
     * @param float|null $heading heading
     *
     * @return self
     */
    public function setHeading($heading)
    {
        if (is_null($heading)) {
            throw new \InvalidArgumentException('non-nullable heading cannot be null');
        }
        $this->container['heading'] = $heading;

        return $this;
    }

    /**
     * Gets inbound_reach
     *
     * @return int|null
     */
    public function getInboundReach()
    {
        return $this->container['inbound_reach'];
    }

    /**
     * Sets inbound_reach
     *
     * @param int|null $inbound_reach inbound_reach
     *
     * @return self
     */
    public function setInboundReach($inbound_reach)
    {
        if (is_null($inbound_reach)) {
            throw new \InvalidArgumentException('non-nullable inbound_reach cannot be null');
        }
        $this->container['inbound_reach'] = $inbound_reach;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float|null $distance distance
     *
     * @return self
     */
    public function setDistance($distance)
    {
        if (is_null($distance)) {
            throw new \InvalidArgumentException('non-nullable distance cannot be null');
        }
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets predicted_speeds
     *
     * @return int[]|null
     */
    public function getPredictedSpeeds()
    {
        return $this->container['predicted_speeds'];
    }

    /**
     * Sets predicted_speeds
     *
     * @param int[]|null $predicted_speeds Predicted speed information based on historical data. If available, this will include 2016 entries. Each entry represents 5 minutes, where the first entry represents midnight on Monday, the second entry represents 00:05 on Monday, etc.
     *
     * @return self
     */
    public function setPredictedSpeeds($predicted_speeds)
    {
        if (is_null($predicted_speeds)) {
            throw new \InvalidArgumentException('non-nullable predicted_speeds cannot be null');
        }
        $this->container['predicted_speeds'] = $predicted_speeds;

        return $this;
    }

    /**
     * Gets edge_info
     *
     * @return \OpenAPI\Client\Model\LocateEdgeInfo|null
     */
    public function getEdgeInfo()
    {
        return $this->container['edge_info'];
    }

    /**
     * Sets edge_info
     *
     * @param \OpenAPI\Client\Model\LocateEdgeInfo|null $edge_info edge_info
     *
     * @return self
     */
    public function setEdgeInfo($edge_info)
    {
        if (is_null($edge_info)) {
            throw new \InvalidArgumentException('non-nullable edge_info cannot be null');
        }
        $this->container['edge_info'] = $edge_info;

        return $this;
    }

    /**
     * Gets edge
     *
     * @return \OpenAPI\Client\Model\LocateDetailedEdge|null
     */
    public function getEdge()
    {
        return $this->container['edge'];
    }

    /**
     * Sets edge
     *
     * @param \OpenAPI\Client\Model\LocateDetailedEdge|null $edge edge
     *
     * @return self
     */
    public function setEdge($edge)
    {
        if (is_null($edge)) {
            throw new \InvalidArgumentException('non-nullable edge cannot be null');
        }
        $this->container['edge'] = $edge;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return string[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param string[]|null $warnings warnings
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


