<?php
/**
 * GeocodingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stadia Maps Geospatial APIs
 *
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 6.5.0
 * Contact: support@stadiamaps.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * GeocodingApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GeocodingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'autocomplete' => [
            'application/json',
        ],
        'place' => [
            'application/json',
        ],
        'reverse' => [
            'application/json',
        ],
        'search' => [
            'application/json',
        ],
        'searchStructured' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation autocomplete
     *
     * Search and geocode quickly based on partial input.
     *
     * @param  string $text The place name (address, venue name, etc.) to search for. (required)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autocomplete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PeliasResponse
     */
    public function autocomplete($text, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['autocomplete'][0])
    {
        list($response) = $this->autocompleteWithHttpInfo($text, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType);
        return $response;
    }

    /**
     * Operation autocompleteWithHttpInfo
     *
     * Search and geocode quickly based on partial input.
     *
     * @param  string $text The place name (address, venue name, etc.) to search for. (required)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autocomplete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PeliasResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function autocompleteWithHttpInfo($text, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['autocomplete'][0])
    {
        $request = $this->autocompleteRequest($text, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PeliasResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PeliasResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PeliasResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PeliasResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PeliasResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation autocompleteAsync
     *
     * Search and geocode quickly based on partial input.
     *
     * @param  string $text The place name (address, venue name, etc.) to search for. (required)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autocomplete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autocompleteAsync($text, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['autocomplete'][0])
    {
        return $this->autocompleteAsyncWithHttpInfo($text, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation autocompleteAsyncWithHttpInfo
     *
     * Search and geocode quickly based on partial input.
     *
     * @param  string $text The place name (address, venue name, etc.) to search for. (required)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autocomplete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autocompleteAsyncWithHttpInfo($text, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['autocomplete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PeliasResponse';
        $request = $this->autocompleteRequest($text, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'autocomplete'
     *
     * @param  string $text The place name (address, venue name, etc.) to search for. (required)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['autocomplete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function autocompleteRequest($text, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['autocomplete'][0])
    {

        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling autocomplete'
            );
        }

















        $resourcePath = '/geocoding/v1/autocomplete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $text,
            'text', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_point_lat,
            'focus.point.lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_point_lon,
            'focus.point.lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_min_lat,
            'boundary.rect.min_lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_max_lat,
            'boundary.rect.max_lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_min_lon,
            'boundary.rect.min_lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_max_lon,
            'boundary.rect.max_lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_circle_lat,
            'boundary.circle.lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_circle_lon,
            'boundary.circle.lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_circle_radius,
            'boundary.circle.radius', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_country,
            'boundary.country', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_gid,
            'boundary.gid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $layers,
            'layers', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sources,
            'sources', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation place
     *
     * Retrieve details of a place using its GID.
     *
     * @param  string[] $ids A list of Pelias GIDs to search for. (required)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['place'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PeliasResponse
     */
    public function place($ids, $lang = null, string $contentType = self::contentTypes['place'][0])
    {
        list($response) = $this->placeWithHttpInfo($ids, $lang, $contentType);
        return $response;
    }

    /**
     * Operation placeWithHttpInfo
     *
     * Retrieve details of a place using its GID.
     *
     * @param  string[] $ids A list of Pelias GIDs to search for. (required)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['place'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PeliasResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function placeWithHttpInfo($ids, $lang = null, string $contentType = self::contentTypes['place'][0])
    {
        $request = $this->placeRequest($ids, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PeliasResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PeliasResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PeliasResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PeliasResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PeliasResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation placeAsync
     *
     * Retrieve details of a place using its GID.
     *
     * @param  string[] $ids A list of Pelias GIDs to search for. (required)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['place'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function placeAsync($ids, $lang = null, string $contentType = self::contentTypes['place'][0])
    {
        return $this->placeAsyncWithHttpInfo($ids, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation placeAsyncWithHttpInfo
     *
     * Retrieve details of a place using its GID.
     *
     * @param  string[] $ids A list of Pelias GIDs to search for. (required)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['place'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function placeAsyncWithHttpInfo($ids, $lang = null, string $contentType = self::contentTypes['place'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PeliasResponse';
        $request = $this->placeRequest($ids, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'place'
     *
     * @param  string[] $ids A list of Pelias GIDs to search for. (required)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['place'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function placeRequest($ids, $lang = null, string $contentType = self::contentTypes['place'][0])
    {

        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling place'
            );
        }
        if (count($ids) < 1) {
            throw new \InvalidArgumentException('invalid value for "$ids" when calling GeocodingApi.place, number of items must be greater than or equal to 1.');
        }
        


        $resourcePath = '/geocoding/v1/place';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reverse
     *
     * Find places and addresses near geographic coordinates (reverse geocoding).
     *
     * @param  float $point_lat The latitude of the point at which to perform the search. (required)
     * @param  float $point_lon The longitude of the point at which to perform the search. (required)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverse'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PeliasResponse
     */
    public function reverse($point_lat, $point_lon, $boundary_circle_radius = null, $layers = null, $sources = null, $boundary_country = null, $boundary_gid = null, $size = null, $lang = null, string $contentType = self::contentTypes['reverse'][0])
    {
        list($response) = $this->reverseWithHttpInfo($point_lat, $point_lon, $boundary_circle_radius, $layers, $sources, $boundary_country, $boundary_gid, $size, $lang, $contentType);
        return $response;
    }

    /**
     * Operation reverseWithHttpInfo
     *
     * Find places and addresses near geographic coordinates (reverse geocoding).
     *
     * @param  float $point_lat The latitude of the point at which to perform the search. (required)
     * @param  float $point_lon The longitude of the point at which to perform the search. (required)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverse'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PeliasResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function reverseWithHttpInfo($point_lat, $point_lon, $boundary_circle_radius = null, $layers = null, $sources = null, $boundary_country = null, $boundary_gid = null, $size = null, $lang = null, string $contentType = self::contentTypes['reverse'][0])
    {
        $request = $this->reverseRequest($point_lat, $point_lon, $boundary_circle_radius, $layers, $sources, $boundary_country, $boundary_gid, $size, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PeliasResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PeliasResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PeliasResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PeliasResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PeliasResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reverseAsync
     *
     * Find places and addresses near geographic coordinates (reverse geocoding).
     *
     * @param  float $point_lat The latitude of the point at which to perform the search. (required)
     * @param  float $point_lon The longitude of the point at which to perform the search. (required)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reverseAsync($point_lat, $point_lon, $boundary_circle_radius = null, $layers = null, $sources = null, $boundary_country = null, $boundary_gid = null, $size = null, $lang = null, string $contentType = self::contentTypes['reverse'][0])
    {
        return $this->reverseAsyncWithHttpInfo($point_lat, $point_lon, $boundary_circle_radius, $layers, $sources, $boundary_country, $boundary_gid, $size, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reverseAsyncWithHttpInfo
     *
     * Find places and addresses near geographic coordinates (reverse geocoding).
     *
     * @param  float $point_lat The latitude of the point at which to perform the search. (required)
     * @param  float $point_lon The longitude of the point at which to perform the search. (required)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reverseAsyncWithHttpInfo($point_lat, $point_lon, $boundary_circle_radius = null, $layers = null, $sources = null, $boundary_country = null, $boundary_gid = null, $size = null, $lang = null, string $contentType = self::contentTypes['reverse'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PeliasResponse';
        $request = $this->reverseRequest($point_lat, $point_lon, $boundary_circle_radius, $layers, $sources, $boundary_country, $boundary_gid, $size, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reverse'
     *
     * @param  float $point_lat The latitude of the point at which to perform the search. (required)
     * @param  float $point_lon The longitude of the point at which to perform the search. (required)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reverse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reverseRequest($point_lat, $point_lon, $boundary_circle_radius = null, $layers = null, $sources = null, $boundary_country = null, $boundary_gid = null, $size = null, $lang = null, string $contentType = self::contentTypes['reverse'][0])
    {

        // verify the required parameter 'point_lat' is set
        if ($point_lat === null || (is_array($point_lat) && count($point_lat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $point_lat when calling reverse'
            );
        }
        if ($point_lat > 90) {
            throw new \InvalidArgumentException('invalid value for "$point_lat" when calling GeocodingApi.reverse, must be smaller than or equal to 90.');
        }
        if ($point_lat < -90) {
            throw new \InvalidArgumentException('invalid value for "$point_lat" when calling GeocodingApi.reverse, must be bigger than or equal to -90.');
        }
        
        // verify the required parameter 'point_lon' is set
        if ($point_lon === null || (is_array($point_lon) && count($point_lon) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $point_lon when calling reverse'
            );
        }
        if ($point_lon > 180) {
            throw new \InvalidArgumentException('invalid value for "$point_lon" when calling GeocodingApi.reverse, must be smaller than or equal to 180.');
        }
        if ($point_lon < -180) {
            throw new \InvalidArgumentException('invalid value for "$point_lon" when calling GeocodingApi.reverse, must be bigger than or equal to -180.');
        }
        








        $resourcePath = '/geocoding/v1/reverse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $point_lat,
            'point.lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $point_lon,
            'point.lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_circle_radius,
            'boundary.circle.radius', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $layers,
            'layers', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sources,
            'sources', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_country,
            'boundary.country', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_gid,
            'boundary.gid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation search
     *
     * Search for location and other info using a place name or address (forward geocoding).
     *
     * @param  string $text The place name (address, venue name, etc.) to search for. (required)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['search'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PeliasResponse
     */
    public function search($text, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['search'][0])
    {
        list($response) = $this->searchWithHttpInfo($text, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType);
        return $response;
    }

    /**
     * Operation searchWithHttpInfo
     *
     * Search for location and other info using a place name or address (forward geocoding).
     *
     * @param  string $text The place name (address, venue name, etc.) to search for. (required)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['search'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PeliasResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWithHttpInfo($text, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['search'][0])
    {
        $request = $this->searchRequest($text, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PeliasResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PeliasResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PeliasResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PeliasResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PeliasResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchAsync
     *
     * Search for location and other info using a place name or address (forward geocoding).
     *
     * @param  string $text The place name (address, venue name, etc.) to search for. (required)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['search'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsync($text, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['search'][0])
    {
        return $this->searchAsyncWithHttpInfo($text, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchAsyncWithHttpInfo
     *
     * Search for location and other info using a place name or address (forward geocoding).
     *
     * @param  string $text The place name (address, venue name, etc.) to search for. (required)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['search'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchAsyncWithHttpInfo($text, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['search'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PeliasResponse';
        $request = $this->searchRequest($text, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'search'
     *
     * @param  string $text The place name (address, venue name, etc.) to search for. (required)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['search'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchRequest($text, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['search'][0])
    {

        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling search'
            );
        }

















        $resourcePath = '/geocoding/v1/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $text,
            'text', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_point_lat,
            'focus.point.lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_point_lon,
            'focus.point.lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_min_lat,
            'boundary.rect.min_lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_max_lat,
            'boundary.rect.max_lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_min_lon,
            'boundary.rect.min_lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_max_lon,
            'boundary.rect.max_lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_circle_lat,
            'boundary.circle.lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_circle_lon,
            'boundary.circle.lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_circle_radius,
            'boundary.circle.radius', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_country,
            'boundary.country', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_gid,
            'boundary.gid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $layers,
            'layers', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sources,
            'sources', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchStructured
     *
     * Find locations matching components (structured forward geocoding).
     *
     * @param  string $address A street name, optionally with a house number. (optional)
     * @param  string $neighbourhood Varies by area, but has a locally specific meaning (NOT always an official administrative unit). (optional)
     * @param  string $borough A unit within a city (not widely used, but present in places like NYC and Mexico City). (optional)
     * @param  string $locality The city, village, town, etc. that the place/address is part of. (optional)
     * @param  string $county Administrative divisions between localities and regions. Not commonly used as input to structured geocoding. (optional)
     * @param  string $region Typically the first administrative division within a country. For example, a US state or a Canadian province. (optional)
     * @param  string $postalcode A mail sorting code. (optional)
     * @param  string $country A full name (ex: Canada), or a 2 or 3 character ISO code. Prefer ISO codes when possible. (optional)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchStructured'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PeliasResponse
     */
    public function searchStructured($address = null, $neighbourhood = null, $borough = null, $locality = null, $county = null, $region = null, $postalcode = null, $country = null, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['searchStructured'][0])
    {
        list($response) = $this->searchStructuredWithHttpInfo($address, $neighbourhood, $borough, $locality, $county, $region, $postalcode, $country, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType);
        return $response;
    }

    /**
     * Operation searchStructuredWithHttpInfo
     *
     * Find locations matching components (structured forward geocoding).
     *
     * @param  string $address A street name, optionally with a house number. (optional)
     * @param  string $neighbourhood Varies by area, but has a locally specific meaning (NOT always an official administrative unit). (optional)
     * @param  string $borough A unit within a city (not widely used, but present in places like NYC and Mexico City). (optional)
     * @param  string $locality The city, village, town, etc. that the place/address is part of. (optional)
     * @param  string $county Administrative divisions between localities and regions. Not commonly used as input to structured geocoding. (optional)
     * @param  string $region Typically the first administrative division within a country. For example, a US state or a Canadian province. (optional)
     * @param  string $postalcode A mail sorting code. (optional)
     * @param  string $country A full name (ex: Canada), or a 2 or 3 character ISO code. Prefer ISO codes when possible. (optional)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchStructured'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PeliasResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchStructuredWithHttpInfo($address = null, $neighbourhood = null, $borough = null, $locality = null, $county = null, $region = null, $postalcode = null, $country = null, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['searchStructured'][0])
    {
        $request = $this->searchStructuredRequest($address, $neighbourhood, $borough, $locality, $county, $region, $postalcode, $country, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PeliasResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PeliasResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PeliasResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PeliasResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PeliasResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchStructuredAsync
     *
     * Find locations matching components (structured forward geocoding).
     *
     * @param  string $address A street name, optionally with a house number. (optional)
     * @param  string $neighbourhood Varies by area, but has a locally specific meaning (NOT always an official administrative unit). (optional)
     * @param  string $borough A unit within a city (not widely used, but present in places like NYC and Mexico City). (optional)
     * @param  string $locality The city, village, town, etc. that the place/address is part of. (optional)
     * @param  string $county Administrative divisions between localities and regions. Not commonly used as input to structured geocoding. (optional)
     * @param  string $region Typically the first administrative division within a country. For example, a US state or a Canadian province. (optional)
     * @param  string $postalcode A mail sorting code. (optional)
     * @param  string $country A full name (ex: Canada), or a 2 or 3 character ISO code. Prefer ISO codes when possible. (optional)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchStructured'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchStructuredAsync($address = null, $neighbourhood = null, $borough = null, $locality = null, $county = null, $region = null, $postalcode = null, $country = null, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['searchStructured'][0])
    {
        return $this->searchStructuredAsyncWithHttpInfo($address, $neighbourhood, $borough, $locality, $county, $region, $postalcode, $country, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchStructuredAsyncWithHttpInfo
     *
     * Find locations matching components (structured forward geocoding).
     *
     * @param  string $address A street name, optionally with a house number. (optional)
     * @param  string $neighbourhood Varies by area, but has a locally specific meaning (NOT always an official administrative unit). (optional)
     * @param  string $borough A unit within a city (not widely used, but present in places like NYC and Mexico City). (optional)
     * @param  string $locality The city, village, town, etc. that the place/address is part of. (optional)
     * @param  string $county Administrative divisions between localities and regions. Not commonly used as input to structured geocoding. (optional)
     * @param  string $region Typically the first administrative division within a country. For example, a US state or a Canadian province. (optional)
     * @param  string $postalcode A mail sorting code. (optional)
     * @param  string $country A full name (ex: Canada), or a 2 or 3 character ISO code. Prefer ISO codes when possible. (optional)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchStructured'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchStructuredAsyncWithHttpInfo($address = null, $neighbourhood = null, $borough = null, $locality = null, $county = null, $region = null, $postalcode = null, $country = null, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['searchStructured'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PeliasResponse';
        $request = $this->searchStructuredRequest($address, $neighbourhood, $borough, $locality, $county, $region, $postalcode, $country, $focus_point_lat, $focus_point_lon, $boundary_rect_min_lat, $boundary_rect_max_lat, $boundary_rect_min_lon, $boundary_rect_max_lon, $boundary_circle_lat, $boundary_circle_lon, $boundary_circle_radius, $boundary_country, $boundary_gid, $layers, $sources, $size, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchStructured'
     *
     * @param  string $address A street name, optionally with a house number. (optional)
     * @param  string $neighbourhood Varies by area, but has a locally specific meaning (NOT always an official administrative unit). (optional)
     * @param  string $borough A unit within a city (not widely used, but present in places like NYC and Mexico City). (optional)
     * @param  string $locality The city, village, town, etc. that the place/address is part of. (optional)
     * @param  string $county Administrative divisions between localities and regions. Not commonly used as input to structured geocoding. (optional)
     * @param  string $region Typically the first administrative division within a country. For example, a US state or a Canadian province. (optional)
     * @param  string $postalcode A mail sorting code. (optional)
     * @param  string $country A full name (ex: Canada), or a 2 or 3 character ISO code. Prefer ISO codes when possible. (optional)
     * @param  float $focus_point_lat The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     * @param  float $focus_point_lon The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     * @param  float $boundary_rect_min_lat Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lat Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_min_lon Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_rect_max_lon Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     * @param  float $boundary_circle_lat The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     * @param  float $boundary_circle_lon The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     * @param  float $boundary_circle_radius The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     * @param  string[] $boundary_country A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     * @param  string $boundary_gid The Pelias GID of an area to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasLayer[] $layers A list of layers to limit the search to. (optional)
     * @param  \OpenAPI\Client\Model\PeliasSource[] $sources A list of sources to limit the search to. (optional)
     * @param  int $size The maximum number of results to return. (optional)
     * @param  string $lang A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchStructured'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchStructuredRequest($address = null, $neighbourhood = null, $borough = null, $locality = null, $county = null, $region = null, $postalcode = null, $country = null, $focus_point_lat = null, $focus_point_lon = null, $boundary_rect_min_lat = null, $boundary_rect_max_lat = null, $boundary_rect_min_lon = null, $boundary_rect_max_lon = null, $boundary_circle_lat = null, $boundary_circle_lon = null, $boundary_circle_radius = null, $boundary_country = null, $boundary_gid = null, $layers = null, $sources = null, $size = null, $lang = null, string $contentType = self::contentTypes['searchStructured'][0])
    {

























        $resourcePath = '/geocoding/v1/search/structured';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address,
            'address', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $neighbourhood,
            'neighbourhood', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $borough,
            'borough', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $locality,
            'locality', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $county,
            'county', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $region,
            'region', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $postalcode,
            'postalcode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_point_lat,
            'focus.point.lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_point_lon,
            'focus.point.lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_min_lat,
            'boundary.rect.min_lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_max_lat,
            'boundary.rect.max_lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_min_lon,
            'boundary.rect.min_lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_rect_max_lon,
            'boundary.rect.max_lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_circle_lat,
            'boundary.circle.lat', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_circle_lon,
            'boundary.circle.lon', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_circle_radius,
            'boundary.circle.radius', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_country,
            'boundary.country', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $boundary_gid,
            'boundary.gid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $layers,
            'layers', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sources,
            'sources', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key');
        if ($apiKey !== null) {
            $queryParams['api_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
